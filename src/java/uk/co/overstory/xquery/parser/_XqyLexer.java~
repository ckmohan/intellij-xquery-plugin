/* The following code was generated by JFlex 1.4.3 on 1/14/12 6:27 PM */

package uk.co.overstory.xquery.parser;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import uk.co.overstory.xquery.psi.XqyTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/14/12 6:27 PM from the specification file
 * <tt>grammar/XQuery.flex</tt>
 */
public class _XqyLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING_QUOTE = 2;
  public static final int STRING_APOST = 4;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\5\1\0\1\1\1\46\22\0\1\1\1\55\1\44"+
    "\1\54\1\74\1\0\1\66\1\4\1\50\1\13\1\11\1\10\1\73"+
    "\1\33\1\6\1\64\12\47\1\12\1\72\1\51\1\65\1\53\1\52"+
    "\1\71\1\61\1\2\1\57\1\60\1\7\1\2\15\2\1\62\6\2"+
    "\1\56\1\45\1\63\1\0\1\2\1\0\1\14\1\20\1\27\1\32"+
    "\1\22\1\36\1\37\1\40\1\17\2\2\1\34\1\24\1\23\1\31"+
    "\1\26\1\35\1\16\1\25\1\15\1\21\1\43\1\42\1\41\1\30"+
    "\1\2\1\67\1\75\1\70\54\0\1\0\12\0\1\0\4\0\1\0"+
    "\5\0\27\0\1\0\37\0\1\0\u013f\0\31\0\162\0\4\0\14\0"+
    "\16\0\5\0\11\0\1\0\213\0\1\0\13\0\1\0\1\0\3\0"+
    "\1\0\1\0\1\0\24\0\1\0\54\0\1\0\46\0\1\0\5\0"+
    "\4\0\202\0\10\0\105\0\1\0\46\0\2\0\2\0\6\0\20\0"+
    "\41\0\46\0\2\0\1\0\7\0\47\0\110\0\33\0\5\0\3\0"+
    "\56\0\32\0\5\0\13\0\25\0\12\3\4\0\2\0\1\0\143\0"+
    "\1\0\1\0\17\0\2\0\7\0\2\0\12\3\3\0\2\0\1\0"+
    "\20\0\1\0\1\0\36\0\35\0\3\0\60\0\46\0\13\0\1\0"+
    "\u0152\0\66\0\3\0\1\0\22\0\1\0\7\0\12\0\4\0\12\3"+
    "\25\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\1\0"+
    "\3\0\4\0\3\0\1\0\36\0\2\0\1\0\3\0\4\0\12\3"+
    "\2\0\23\0\6\0\4\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\2\0\1\0\2\0\1\0\2\0\37\0\4\0\1\0\1\0\7\0"+
    "\12\3\2\0\3\0\20\0\11\0\1\0\3\0\1\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\3\0\1\0\22\0\1\0\17\0"+
    "\2\0\4\0\12\3\25\0\10\0\2\0\2\0\2\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\3\0\1\0\36\0\2\0\1\0"+
    "\3\0\4\0\12\3\1\0\1\0\21\0\1\0\1\0\6\0\3\0"+
    "\3\0\1\0\4\0\3\0\2\0\1\0\1\0\1\0\2\0\3\0"+
    "\2\0\3\0\3\0\3\0\10\0\1\0\3\0\55\0\11\3\25\0"+
    "\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0\46\0"+
    "\2\0\4\0\12\3\25\0\10\0\1\0\3\0\1\0\27\0\1\0"+
    "\12\0\1\0\5\0\3\0\1\0\40\0\1\0\1\0\2\0\4\0"+
    "\12\3\25\0\10\0\1\0\3\0\1\0\27\0\1\0\20\0\46\0"+
    "\2\0\4\0\12\3\25\0\22\0\3\0\30\0\1\0\11\0\1\0"+
    "\1\0\2\0\7\0\72\0\60\0\1\0\2\0\14\0\7\0\11\0"+
    "\12\3\47\0\2\0\1\0\1\0\2\0\2\0\1\0\1\0\2\0"+
    "\1\0\6\0\4\0\1\0\7\0\1\0\3\0\1\0\1\0\1\0"+
    "\1\0\2\0\2\0\1\0\4\0\1\0\2\0\11\0\1\0\2\0"+
    "\5\0\1\0\1\0\11\0\12\3\2\0\2\0\42\0\1\0\37\0"+
    "\12\3\26\0\10\0\1\0\42\0\35\0\4\0\164\0\42\0\1\0"+
    "\5\0\1\0\2\0\25\0\12\3\6\0\6\0\112\0\46\0\12\0"+
    "\51\0\7\0\132\0\5\0\104\0\5\0\122\0\6\0\7\0\1\0"+
    "\77\0\1\0\1\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0"+
    "\4\0\2\0\47\0\1\0\1\0\1\0\4\0\2\0\37\0\1\0"+
    "\1\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0"+
    "\7\0\1\0\7\0\1\0\27\0\1\0\37\0\1\0\1\0\1\0"+
    "\4\0\2\0\7\0\1\0\47\0\1\0\23\0\16\0\11\3\56\0"+
    "\125\0\14\0\u026c\0\2\0\10\0\12\0\32\0\5\0\113\0\25\0"+
    "\15\0\1\0\4\0\16\0\22\0\16\0\22\0\16\0\15\0\1\0"+
    "\3\0\17\0\64\0\43\0\1\0\4\0\1\0\3\0\12\3\46\0"+
    "\12\3\6\0\130\0\10\0\51\0\127\0\35\0\51\0\12\3\36\0"+
    "\2\0\5\0\u038b\0\154\0\224\0\234\0\4\0\132\0\6\0\26\0"+
    "\2\0\6\0\2\0\46\0\2\0\6\0\2\0\10\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\37\0\2\0\65\0\1\0\7\0"+
    "\1\0\1\0\3\0\3\0\1\0\7\0\3\0\4\0\2\0\6\0"+
    "\4\0\15\0\5\0\3\0\1\0\7\0\164\0\1\0\15\0\1\0"+
    "\202\0\1\0\4\0\1\0\2\0\12\0\1\0\1\0\3\0\5\0"+
    "\6\0\1\0\1\0\1\0\1\0\1\0\1\0\4\0\1\0\3\0"+
    "\1\0\7\0\3\0\3\0\5\0\5\0\u0ebb\0\2\0\52\0\5\0"+
    "\5\0\2\0\4\0\126\0\6\0\3\0\1\0\132\0\1\0\4\0"+
    "\5\0\50\0\4\0\136\0\21\0\30\0\70\0\20\0\u0200\0\u19b6\0"+
    "\112\0\u51a6\0\132\0\u048d\0\u0773\0\u2ba4\0\u215c\0\u012e\0\2\0\73\0"+
    "\225\0\7\0\14\0\5\0\5\0\1\0\1\0\12\0\1\0\15\0"+
    "\1\0\5\0\1\0\1\0\1\0\2\0\1\0\2\0\1\0\154\0"+
    "\41\0\u016b\0\22\0\100\0\2\0\66\0\50\0\14\0\164\0\5\0"+
    "\1\0\207\0\23\0\12\3\7\0\32\0\6\0\32\0\13\0\131\0"+
    "\3\0\6\0\2\0\6\0\2\0\6\0\2\0\3\0\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\16\3\1\13\6\3\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\36\1\37\1\1\4\0"+
    "\1\4\1\41\1\42\1\43\2\3\1\44\3\3\1\44"+
    "\30\3\1\44\3\3\1\0\1\44\6\3\1\45\1\46"+
    "\1\47\1\0\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\4\0\24\3\1\44\20\3\1\66\6\3\2\0\1\67"+
    "\1\70\26\3\1\44\13\3\1\71\1\0\7\3\1\44"+
    "\6\3\1\44\5\3\1\0\21\3\1\0\14\3\1\0"+
    "\1\44\10\3\1\44\1\0\3\3\1\44\3\3\1\72"+
    "\21\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\370\0\370\0\u026c\0\370\0\u02aa\0\u02e8"+
    "\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\370\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\370\0\u0934\0\u0972\0\370\0\u09b0\0\370"+
    "\0\370\0\370\0\370\0\370\0\370\0\370\0\u09ee\0\u0a2c"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c"+
    "\0\u0c5a\0\370\0\370\0\370\0\u0c98\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0174\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\370"+
    "\0\370\0\370\0\u16c4\0\370\0\370\0\370\0\370\0\370"+
    "\0\370\0\370\0\370\0\370\0\u1702\0\370\0\370\0\370"+
    "\0\370\0\u0b24\0\u1740\0\u177e\0\u0c5a\0\u17bc\0\u17fa\0\u1838"+
    "\0\u1876\0\u1512\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea"+
    "\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda"+
    "\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba"+
    "\0\u1ff8\0\u2036\0\370\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c"+
    "\0\u21aa\0\u21e8\0\u2226\0\370\0\370\0\u2264\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0"+
    "\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0"+
    "\0\u26fe\0\u273c\0\u277a\0\u11ae\0\u27b8\0\u27f6\0\u2834\0\u2872"+
    "\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\370"+
    "\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14"+
    "\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04"+
    "\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4"+
    "\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4"+
    "\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4"+
    "\0\u3412\0\u3450\0\u348e\0\u34cc\0\u2e04\0\u350a\0\u3548\0\u3586"+
    "\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776"+
    "\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966"+
    "\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\370"+
    "\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08"+
    "\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8"+
    "\0\u3f36";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\6\1\12\1\7"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\7\1\33\1\34\1\35\1\36\1\7\1\37\1\40"+
    "\1\7\1\41\1\42\1\43\1\44\1\5\1\6\1\10"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\4\7"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\5\67\1\5\36\67\1\70\1\71"+
    "\1\5\27\67\4\72\1\73\1\5\37\72\1\71\1\5"+
    "\27\72\11\74\1\5\64\74\77\0\1\6\3\0\1\6"+
    "\40\0\1\6\31\0\1\7\3\0\2\7\4\0\30\7"+
    "\3\0\1\7\7\0\4\7\16\0\1\10\1\75\1\0"+
    "\1\76\1\77\12\0\1\77\24\0\1\10\26\0\5\100"+
    "\1\0\70\100\3\0\1\101\2\0\1\102\40\0\1\101"+
    "\40\0\1\103\52\0\1\104\12\0\1\7\3\0\2\7"+
    "\4\0\1\7\1\105\5\7\1\106\1\7\1\107\16\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\2\7\1\110\3\7\1\111\5\7\1\112\1\113"+
    "\12\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\6\7\1\114\21\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\1\7\1\115"+
    "\5\7\1\116\1\117\1\113\4\7\1\120\3\7\1\113"+
    "\5\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\3\7\1\121\24\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\7\7\1\122"+
    "\20\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\10\7\1\123\7\7\1\124\1\113\3\7"+
    "\1\125\1\7\1\126\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\1\127\5\7\1\113\6\7"+
    "\1\130\12\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\15\7\1\131\12\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\1\132"+
    "\1\133\4\7\1\134\4\7\1\135\1\7\1\136\12\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\1\137\1\7\1\140\25\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\1\141\14\7"+
    "\1\142\6\7\1\143\3\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\2\7\1\144\25\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\3\7\1\145\2\7\1\146\6\7\1\147\12\7"+
    "\3\0\1\7\7\0\4\7\46\0\1\150\44\0\1\7"+
    "\3\0\2\7\4\0\1\7\1\113\4\7\1\151\21\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\5\7\1\152\7\7\1\153\12\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\1\7"+
    "\1\113\4\7\1\113\21\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\21\7\1\154\6\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\24\7\1\155\3\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\1\156\5\7\1\157"+
    "\21\7\3\0\1\7\7\0\4\7\25\0\1\160\41\0"+
    "\1\161\73\0\1\162\2\0\1\163\6\0\1\164\1\165"+
    "\63\0\1\166\107\0\1\167\23\0\1\170\147\0\1\171"+
    "\63\0\1\172\75\0\1\173\10\0\1\174\65\0\1\175"+
    "\21\0\5\67\1\0\36\67\3\0\27\67\44\0\1\176"+
    "\47\0\1\177\4\0\1\200\52\0\4\72\2\0\37\72"+
    "\2\0\27\72\4\0\1\201\71\0\12\202\1\203\63\202"+
    "\5\204\1\0\70\204\3\0\1\76\3\0\1\77\12\0"+
    "\1\77\24\0\1\76\31\0\1\101\4\0\1\205\22\0"+
    "\1\205\13\0\1\101\32\0\1\205\74\0\1\101\43\0"+
    "\1\101\30\0\1\7\3\0\2\7\4\0\1\7\1\206"+
    "\26\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\13\7\1\207\2\7\1\113\11\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\13\7\1\210\14\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\6\7\1\211\5\7\1\113"+
    "\13\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\25\7\1\212\2\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\12\7\1\213"+
    "\15\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\1\7\1\214\26\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\6\7\1\215"+
    "\21\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\1\7\1\216\7\7\1\217\16\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\12\7\1\220\15\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\3\7\1\145\24\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\7\7\1\221\20\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\3\7\1\222\11\7\1\223"+
    "\12\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\12\7\1\224\15\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\6\7\1\225"+
    "\2\7\1\226\16\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\13\7\1\227\14\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\6\7\1\230\21\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\10\7\1\231\17\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\16\7\1\226\11\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\16\7\1\232\11\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\1\7\1\233\26\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\1\234\27\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\20\7"+
    "\1\235\7\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\24\7\1\236\3\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\10\7"+
    "\1\226\17\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\2\7\1\237\25\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\6\7"+
    "\1\240\6\7\1\241\12\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\1\7\1\242\7\7"+
    "\1\243\16\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\10\7\1\225\7\7\1\244\7\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\3\7\1\245\24\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\16\7\1\246\11\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\27\7\1\113\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\11\7\1\247\1\7\1\250"+
    "\6\7\1\251\5\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\13\7\1\252\14\7\3\0"+
    "\1\7\7\0\4\7\66\0\1\253\24\0\1\7\3\0"+
    "\2\7\4\0\1\7\1\113\26\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\7\7\1\254"+
    "\20\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\2\7\1\113\15\7\1\255\7\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\5\7\1\126\22\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\6\7\1\256\21\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\2\7\1\257\15\7\1\260\7\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\2\7\1\261"+
    "\25\7\3\0\1\7\7\0\4\7\46\0\1\262\22\0"+
    "\1\263\60\0\1\264\34\0\12\202\1\203\1\265\62\202"+
    "\4\0\1\101\73\0\1\7\3\0\2\7\4\0\2\7"+
    "\1\266\25\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\6\7\1\267\21\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\6\7"+
    "\1\270\21\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\1\212\27\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\6\7\1\271"+
    "\21\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\5\7\1\272\22\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\10\7\1\113"+
    "\17\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\6\7\1\273\21\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\1\7\1\274"+
    "\26\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\15\7\1\275\12\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\1\230\27\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\15\7\1\276\12\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\2\7\1\277\25\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\1\7\1\300\26\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\10\7\1\237\17\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\6\7\1\113\21\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\6\7\1\301\21\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\2\7\1\302\25\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\6\7\1\303\21\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\5\7\1\304\22\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\3\7\1\305\24\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\4\7\1\304\23\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\22\7\1\113\5\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\6\7\1\306\21\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\6\7\1\307\21\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\13\7\1\310\14\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\12\7\1\311\1\312"+
    "\14\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\13\7\1\313\14\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\1\7\1\314"+
    "\4\7\1\113\21\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\20\7\1\315\7\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\20\7\1\316\7\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\6\7\1\317\21\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\13\7\1\320\14\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\20\7\1\321\7\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\1\322\27\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\5\7\1\323\22\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\13\7"+
    "\1\324\14\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\20\7\1\325\7\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\2\7"+
    "\1\226\25\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\3\7\1\133\24\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\3\7"+
    "\1\326\24\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\11\7\1\327\16\7\3\0\1\7"+
    "\7\0\4\7\46\0\1\330\121\0\1\331\20\0\1\7"+
    "\3\0\2\7\4\0\3\7\1\332\24\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\11\7"+
    "\1\333\16\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\7\7\1\334\20\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\11\7"+
    "\1\335\16\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\2\7\1\276\25\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\2\7"+
    "\1\336\25\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\1\337\27\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\2\7\1\212"+
    "\25\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\7\7\1\113\20\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\16\7\1\340"+
    "\11\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\14\7\1\341\13\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\12\7\1\212"+
    "\15\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\14\7\1\113\13\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\11\7\1\342"+
    "\16\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\20\7\1\226\7\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\11\7\1\343"+
    "\16\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\10\7\1\344\17\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\7\7\1\212"+
    "\20\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\6\7\1\345\21\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\6\7\1\346"+
    "\21\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\6\7\1\347\21\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\24\7\1\113"+
    "\3\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\1\324\27\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\16\7\1\113\11\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\2\7\1\350\25\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\6\7\1\351\21\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\1\256\27\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\5\7\1\352\22\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\10\7\1\353\17\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\1\7\1\327\26\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\15\7\1\354\12\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\16\7\1\355\11\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\3\7\1\222\24\7\3\0\1\7\7\0\4\7\73\0"+
    "\1\356\17\0\1\7\3\0\2\7\4\0\4\7\1\357"+
    "\23\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\1\7\1\360\26\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\16\7\1\361"+
    "\11\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\26\7\1\362\1\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\11\7\1\363"+
    "\16\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\7\7\1\364\20\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\6\7\1\365"+
    "\21\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\17\7\1\366\10\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\12\7\1\367"+
    "\15\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\22\7\1\370\5\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\1\371\27\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\16\7\1\372\11\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\2\7\1\373\25\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\11\7\1\374\16\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\6\7\1\316\21\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\7\7\1\375\20\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\20\7\1\212\7\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\6\7\1\376\21\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\26\7\1\372\1\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\1\377\27\7\3\0\1\7\7\0\4\7\74\0"+
    "\1\u0100\16\0\1\7\3\0\2\7\4\0\5\7\1\377"+
    "\22\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\15\7\1\u0101\12\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\3\7\1\u0102"+
    "\24\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\3\7\1\u0103\24\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\6\7\1\u0104"+
    "\21\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\13\7\1\226\14\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\2\7\1\u0105"+
    "\25\7\3\0\1\7\7\0\4\7\15\0\1\7\3\0"+
    "\2\7\4\0\11\7\1\u0106\16\7\3\0\1\7\7\0"+
    "\4\7\15\0\1\7\3\0\2\7\4\0\1\364\27\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\3\7\1\u0107\24\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\17\7\1\u0108\10\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\3\7\1\u0109\24\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\1\7\1\302\26\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\11\7\1\u010a\16\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\16\7\1\u010b\11\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\7\7\1\u010c\20\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\1\7\1\226\26\7"+
    "\3\0\1\7\7\0\4\7\75\0\1\u010d\15\0\1\7"+
    "\3\0\2\7\4\0\2\7\1\u010e\25\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\7\7"+
    "\1\u010f\20\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\1\7\1\242\26\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\13\7"+
    "\1\212\14\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\6\7\1\u0110\21\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\6\7"+
    "\1\u0111\21\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\1\u0112\5\7\1\u0113\21\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\7\7\1\u0114\20\7\3\0\1\7\7\0\4\7\15\0"+
    "\1\7\3\0\2\7\4\0\3\7\1\u0115\24\7\3\0"+
    "\1\7\7\0\4\7\15\0\1\7\3\0\2\7\4\0"+
    "\1\u0116\2\7\1\u0102\24\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\1\7\1\u0117\26\7"+
    "\3\0\1\7\7\0\4\7\74\0\1\u0118\16\0\1\7"+
    "\3\0\2\7\4\0\17\7\1\u0119\10\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\23\7"+
    "\1\113\4\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\21\7\1\u011a\6\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\11\7"+
    "\1\113\16\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\1\7\1\105\26\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\20\7"+
    "\1\u011b\7\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\23\7\1\u011c\4\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\7\7"+
    "\1\u011d\20\7\3\0\1\7\7\0\4\7\15\0\1\7"+
    "\3\0\2\7\4\0\7\7\1\u011e\20\7\3\0\1\7"+
    "\7\0\4\7\15\0\1\7\3\0\2\7\4\0\17\7"+
    "\1\u011f\10\7\3\0\1\7\7\0\4\7\71\0\1\u0120"+
    "\21\0\1\7\3\0\2\7\4\0\15\7\1\u0121\12\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\5\7\1\u0122\22\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\6\7\1\225\21\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\17\7\1\u0123\10\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\23\7\1\u0124\4\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\1\7\1\u010e\26\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\7\7\1\u0125\20\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\2\7\1\u0126\25\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\6\7\1\337\21\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\11\7\1\u0127\16\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\17\7\1\u0128\10\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\15\7\1\130\12\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\17\7\1\u0129\10\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\3\7\1\u012a\24\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\3\7\1\u012b\24\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\11\7\1\u012c\16\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\4\7\1\u012d\23\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\7\7\1\u012e\20\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\6\7\1\134\21\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\20\7\1\361\7\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\11\7\1\u012f\16\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\1\7\1\u0130\26\7\3\0\1\7\7\0\4\7"+
    "\15\0\1\7\3\0\2\7\4\0\2\7\1\u0131\25\7"+
    "\3\0\1\7\7\0\4\7\15\0\1\7\3\0\2\7"+
    "\4\0\5\7\1\254\22\7\3\0\1\7\7\0\4\7"+
    "\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16244];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\5\1\2\11\1\1\1\11\25\1\1\11"+
    "\6\1\1\11\2\1\1\11\1\1\7\11\6\1\4\0"+
    "\1\1\3\11\43\1\1\0\7\1\3\11\1\0\11\11"+
    "\1\1\4\11\4\0\45\1\1\11\6\1\2\0\2\11"+
    "\42\1\1\11\1\0\24\1\1\0\21\1\1\0\14\1"+
    "\1\0\12\1\1\0\7\1\1\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  public _XqyLexer() {
    this((java.io.Reader)null);
  }


  public _XqyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _XqyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1318) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_RIGHT_BRACE;
          }
        case 59: break;
        case 7: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_PLUS_SIGN;
          }
        case 60: break;
        case 17: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_HASH;
          }
        case 61: break;
        case 39: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_PI_START;
          }
        case 62: break;
        case 23: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_LEFT_BRACE;
          }
        case 63: break;
        case 27: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_COMMA;
          }
        case 64: break;
        case 53: 
          { string.append("'") ;
          }
        case 65: break;
        case 50: 
          { string.append('"') ;
          }
        case 66: break;
        case 33: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_DOTDOT;
          }
        case 67: break;
        case 15: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_QMARK;
          }
        case 68: break;
        case 38: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_PRAGMA_START;
          }
        case 69: break;
        case 43: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_GREATER_EQUAL;
          }
        case 70: break;
        case 16: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_GT;
          }
        case 71: break;
        case 25: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_AT_SIGN;
          }
        case 72: break;
        case 9: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_COLON;
          }
        case 73: break;
        case 4: 
          { return XqyTypes.XQY_NUMBER;
          }
        case 74: break;
        case 55: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_CHAR_HEX_REF_START;
          }
        case 75: break;
        case 45: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_NOT_EQUAL;
          }
        case 76: break;
        case 6: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_DOT;
          }
        case 77: break;
        case 20: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_SLASH;
          }
        case 78: break;
        case 32: 
          { string.append('\\');
          }
        case 79: break;
        case 51: 
          { string.append('\r');
          }
        case 80: break;
        case 3: 
          { return XqyTypes.XQY_ID;
          }
        case 81: break;
        case 57: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_XML_COMMENT_START;
          }
        case 82: break;
        case 49: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_CHAR_REF_START;
          }
        case 83: break;
        case 11: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_MINUS_SIGN;
          }
        case 84: break;
        case 47: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_EMPTY_TAG_END;
          }
        case 85: break;
        case 46: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_CDATA_END;
          }
        case 86: break;
        case 19: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_RIGHT_BRACKET;
          }
        case 87: break;
        case 35: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_OP_BIND;
          }
        case 88: break;
        case 56: 
          { string.append(":)"); yybegin(YYINITIAL); return XqyTypes.XQY_COMMENT;
          }
        case 89: break;
        case 12: 
          { string.setLength(0); yybegin(STRING_QUOTE);
          }
        case 90: break;
        case 41: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_LESS_EQUAL;
          }
        case 91: break;
        case 40: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_END_TAG_START;
          }
        case 92: break;
        case 22: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_AMP;
          }
        case 93: break;
        case 36: 
          { return XqyTypes.XQY_KEYWORD;
          }
        case 94: break;
        case 14: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_LT;
          }
        case 95: break;
        case 8: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_STAR;
          }
        case 96: break;
        case 21: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_EQUAL;
          }
        case 97: break;
        case 1: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 98: break;
        case 5: 
          { string.setLength(0); yybegin(STRING_APOST);
          }
        case 99: break;
        case 52: 
          { string.append('\n');
          }
        case 100: break;
        case 10: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_RIGHT_PAREN;
          }
        case 101: break;
        case 37: 
          { string.setLength(0); yybegin(COMMENT);
          }
        case 102: break;
        case 31: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_STRING;
          }
        case 103: break;
        case 58: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_CDATA_START;
          }
        case 104: break;
        case 13: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_LEFT_PAREN;
          }
        case 105: break;
        case 54: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_XML_COMMENT_END;
          }
        case 106: break;
        case 42: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_PI_END;
          }
        case 107: break;
        case 29: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_VERT_BAR;
          }
        case 108: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 109: break;
        case 28: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_DOLLAR;
          }
        case 110: break;
        case 44: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_PRAGMA_END;
          }
        case 111: break;
        case 18: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_LEFT_BRACKET;
          }
        case 112: break;
        case 48: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_SLASH_SLASH;
          }
        case 113: break;
        case 30: 
          { string.append( yytext() );
          }
        case 114: break;
        case 26: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_SEMICOLON;
          }
        case 115: break;
        case 34: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_AXIS;
          }
        case 116: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
