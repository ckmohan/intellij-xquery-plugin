/* The following code was generated by JFlex 1.4.3 on 2/22/12 8:18 AM */

package uk.co.overstory.xquery.parser;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import uk.co.overstory.xquery.psi.XqyTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/22/12 8:18 AM from the specification file
 * <tt>grammar/XQuery.flex</tt>
 */
public class _XqyLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING_QUOTE = 2;
  public static final int PRAGMA = 12;
  public static final int PRAGMA_QNAME = 14;
  public static final int XML_COMMENT = 8;
  public static final int STRING_APOST = 4;
  public static final int CDATA = 10;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 6;
  public static final int PI = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\5\1\0\1\1\1\53\22\0\1\1\1\55\1\51"+
    "\1\16\1\73\1\0\1\65\1\4\1\11\1\13\1\75\1\10\1\72"+
    "\1\14\1\6\1\63\12\50\1\12\1\71\1\54\1\64\1\20\1\17"+
    "\1\70\1\61\1\2\1\57\1\60\1\7\1\2\15\2\1\62\6\2"+
    "\1\56\1\52\1\15\1\0\1\2\1\0\1\21\1\25\1\34\1\37"+
    "\1\27\1\42\1\43\1\44\1\24\2\2\1\40\1\31\1\30\1\36"+
    "\1\33\1\41\1\23\1\32\1\22\1\26\1\47\1\46\1\45\1\35"+
    "\1\2\1\66\1\74\1\67\54\0\1\0\12\0\1\0\4\0\1\0"+
    "\5\0\27\0\1\0\37\0\1\0\u013f\0\31\0\162\0\4\0\14\0"+
    "\16\0\5\0\11\0\1\0\213\0\1\0\13\0\1\0\1\0\3\0"+
    "\1\0\1\0\1\0\24\0\1\0\54\0\1\0\46\0\1\0\5\0"+
    "\4\0\202\0\10\0\105\0\1\0\46\0\2\0\2\0\6\0\20\0"+
    "\41\0\46\0\2\0\1\0\7\0\47\0\110\0\33\0\5\0\3\0"+
    "\56\0\32\0\5\0\13\0\25\0\12\3\4\0\2\0\1\0\143\0"+
    "\1\0\1\0\17\0\2\0\7\0\2\0\12\3\3\0\2\0\1\0"+
    "\20\0\1\0\1\0\36\0\35\0\3\0\60\0\46\0\13\0\1\0"+
    "\u0152\0\66\0\3\0\1\0\22\0\1\0\7\0\12\0\4\0\12\3"+
    "\25\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\1\0"+
    "\3\0\4\0\3\0\1\0\36\0\2\0\1\0\3\0\4\0\12\3"+
    "\2\0\23\0\6\0\4\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\2\0\1\0\2\0\1\0\2\0\37\0\4\0\1\0\1\0\7\0"+
    "\12\3\2\0\3\0\20\0\11\0\1\0\3\0\1\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\3\0\1\0\22\0\1\0\17\0"+
    "\2\0\4\0\12\3\25\0\10\0\2\0\2\0\2\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\3\0\1\0\36\0\2\0\1\0"+
    "\3\0\4\0\12\3\1\0\1\0\21\0\1\0\1\0\6\0\3\0"+
    "\3\0\1\0\4\0\3\0\2\0\1\0\1\0\1\0\2\0\3\0"+
    "\2\0\3\0\3\0\3\0\10\0\1\0\3\0\55\0\11\3\25\0"+
    "\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0\46\0"+
    "\2\0\4\0\12\3\25\0\10\0\1\0\3\0\1\0\27\0\1\0"+
    "\12\0\1\0\5\0\3\0\1\0\40\0\1\0\1\0\2\0\4\0"+
    "\12\3\25\0\10\0\1\0\3\0\1\0\27\0\1\0\20\0\46\0"+
    "\2\0\4\0\12\3\25\0\22\0\3\0\30\0\1\0\11\0\1\0"+
    "\1\0\2\0\7\0\72\0\60\0\1\0\2\0\14\0\7\0\11\0"+
    "\12\3\47\0\2\0\1\0\1\0\2\0\2\0\1\0\1\0\2\0"+
    "\1\0\6\0\4\0\1\0\7\0\1\0\3\0\1\0\1\0\1\0"+
    "\1\0\2\0\2\0\1\0\4\0\1\0\2\0\11\0\1\0\2\0"+
    "\5\0\1\0\1\0\11\0\12\3\2\0\2\0\42\0\1\0\37\0"+
    "\12\3\26\0\10\0\1\0\42\0\35\0\4\0\164\0\42\0\1\0"+
    "\5\0\1\0\2\0\25\0\12\3\6\0\6\0\112\0\46\0\12\0"+
    "\51\0\7\0\132\0\5\0\104\0\5\0\122\0\6\0\7\0\1\0"+
    "\77\0\1\0\1\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0"+
    "\4\0\2\0\47\0\1\0\1\0\1\0\4\0\2\0\37\0\1\0"+
    "\1\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0"+
    "\7\0\1\0\7\0\1\0\27\0\1\0\37\0\1\0\1\0\1\0"+
    "\4\0\2\0\7\0\1\0\47\0\1\0\23\0\16\0\11\3\56\0"+
    "\125\0\14\0\u026c\0\2\0\10\0\12\0\32\0\5\0\113\0\25\0"+
    "\15\0\1\0\4\0\16\0\22\0\16\0\22\0\16\0\15\0\1\0"+
    "\3\0\17\0\64\0\43\0\1\0\4\0\1\0\3\0\12\3\46\0"+
    "\12\3\6\0\130\0\10\0\51\0\127\0\35\0\51\0\12\3\36\0"+
    "\2\0\5\0\u038b\0\154\0\224\0\234\0\4\0\132\0\6\0\26\0"+
    "\2\0\6\0\2\0\46\0\2\0\6\0\2\0\10\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\37\0\2\0\65\0\1\0\7\0"+
    "\1\0\1\0\3\0\3\0\1\0\7\0\3\0\4\0\2\0\6\0"+
    "\4\0\15\0\5\0\3\0\1\0\7\0\164\0\1\0\15\0\1\0"+
    "\202\0\1\0\4\0\1\0\2\0\12\0\1\0\1\0\3\0\5\0"+
    "\6\0\1\0\1\0\1\0\1\0\1\0\1\0\4\0\1\0\3\0"+
    "\1\0\7\0\3\0\3\0\5\0\5\0\u0ebb\0\2\0\52\0\5\0"+
    "\5\0\2\0\4\0\126\0\6\0\3\0\1\0\132\0\1\0\4\0"+
    "\5\0\50\0\4\0\136\0\21\0\30\0\70\0\20\0\u0200\0\u19b6\0"+
    "\112\0\u51a6\0\132\0\u048d\0\u0773\0\u2ba4\0\u215c\0\u012e\0\2\0\73\0"+
    "\225\0\7\0\14\0\5\0\5\0\1\0\1\0\12\0\1\0\15\0"+
    "\1\0\5\0\1\0\1\0\1\0\2\0\1\0\2\0\1\0\154\0"+
    "\41\0\u016b\0\22\0\100\0\2\0\66\0\50\0\14\0\164\0\5\0"+
    "\1\0\207\0\23\0\12\3\7\0\32\0\6\0\32\0\13\0\131\0"+
    "\3\0\6\0\2\0\6\0\2\0\6\0\2\0\3\0\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\24\10\1\24\1\25"+
    "\1\6\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\42\1\43\1\1\1\6\2\2\1\6\2\3\1\6"+
    "\2\4\1\6\1\45\2\5\1\6\4\0\1\11\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\2\10\1\54\3\10"+
    "\1\54\30\10\1\54\3\10\1\54\6\10\1\55\1\0"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\0\1\1\1\70\5\0\1\71\1\72"+
    "\2\0\24\10\1\54\27\10\2\0\1\73\1\0\1\74"+
    "\1\0\1\75\1\0\27\10\1\54\13\10\1\76\1\0"+
    "\1\3\1\4\7\10\1\54\7\10\1\54\4\10\2\0"+
    "\1\4\20\10\2\0\1\4\14\10\1\0\1\54\10\10"+
    "\1\54\1\0\3\10\1\54\3\10\1\77\21\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u022e"+
    "\0\u03a2\0\u03e0\0\u022e\0\u022e\0\u022e\0\u022e\0\u041e\0\u045c"+
    "\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c"+
    "\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c"+
    "\0\u087a\0\u08b8\0\u08f6\0\u022e\0\u0934\0\u0972\0\u022e\0\u09b0"+
    "\0\u022e\0\u09ee\0\u022e\0\u022e\0\u022e\0\u022e\0\u022e\0\u022e"+
    "\0\u022e\0\u022e\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u022e\0\u022e\0\u022e\0\u022e\0\u022e"+
    "\0\u022e\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u02aa"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550"+
    "\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740"+
    "\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930"+
    "\0\u196e\0\u19ac\0\u19ea\0\u022e\0\u1a28\0\u022e\0\u022e\0\u022e"+
    "\0\u022e\0\u022e\0\u1a66\0\u022e\0\u022e\0\u022e\0\u022e\0\u1aa4"+
    "\0\u1ae2\0\u022e\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u022e"+
    "\0\u022e\0\u1c56\0\u0ffc\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1876"+
    "\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e"+
    "\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe"+
    "\0\u273c\0\u022e\0\u277a\0\u022e\0\u27b8\0\u022e\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24"+
    "\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14"+
    "\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u1550\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6"+
    "\0\u2ff4\0\u3032\0\u022e\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168"+
    "\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358"+
    "\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548"+
    "\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738"+
    "\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928"+
    "\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18"+
    "\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u34cc\0\u3c4e\0\u3c8c\0\u3cca"+
    "\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba"+
    "\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa"+
    "\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u022e"+
    "\0\u429a\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c"+
    "\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c"+
    "\0\u467a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\13\1\17\1\14"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\12\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\14\1\44\1\45"+
    "\1\46\1\14\1\47\1\50\1\14\1\51\1\52\1\53"+
    "\1\15\1\54\1\12\1\13\1\55\1\56\1\57\4\14"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\5\73\1\12\43\73\1\74\1\75"+
    "\1\12\22\73\4\76\1\77\1\12\44\76\1\75\1\12"+
    "\22\76\11\100\1\12\1\101\63\100\4\102\1\103\7\102"+
    "\1\104\61\102\4\105\1\106\10\105\1\107\60\105\4\110"+
    "\1\111\6\110\1\12\2\110\1\112\57\110\1\12\1\13"+
    "\1\113\2\12\1\13\1\12\1\113\11\12\27\113\3\12"+
    "\1\13\3\12\4\113\13\12\4\114\1\115\12\114\1\116"+
    "\1\12\55\114\77\0\1\13\3\0\1\13\45\0\1\13"+
    "\24\0\1\14\3\0\2\14\4\0\1\14\4\0\30\14"+
    "\6\0\4\14\16\0\1\15\1\117\1\0\1\120\1\121"+
    "\17\0\1\121\20\0\1\15\25\0\5\122\1\0\70\122"+
    "\3\0\1\123\2\0\1\124\41\0\1\123\37\0\1\125"+
    "\3\0\1\126\71\0\1\127\51\0\1\130\75\0\1\131"+
    "\13\0\1\14\3\0\2\14\4\0\1\14\4\0\1\14"+
    "\1\132\5\14\1\133\1\14\1\134\16\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\2\14"+
    "\1\135\3\14\1\136\5\14\1\137\1\140\12\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\6\14\1\141\21\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\1\14\1\142\5\14\1\143"+
    "\1\144\1\140\4\14\1\145\2\14\1\140\6\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\3\14\1\146\24\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\7\14\1\147\20\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\10\14\1\150\6\14\1\151\1\140\3\14\1\152\1\14"+
    "\1\153\1\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\1\154\5\14\1\140\6\14\1\155"+
    "\12\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\15\14\1\156\12\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\1\157\1\160"+
    "\4\14\1\161\4\14\1\162\1\14\1\163\12\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\1\164\1\14\1\165\25\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\1\166\14\14\1\167"+
    "\5\14\1\170\4\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\2\14\1\171\25\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\3\14\1\172\2\14\1\173\6\14\1\174\12\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\1\14\1\140\4\14\1\175\21\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\5\14\1\176"+
    "\7\14\1\177\12\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\1\14\1\140\4\14\1\140"+
    "\21\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\20\14\1\200\7\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\23\14\1\201"+
    "\4\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\1\202\5\14\1\203\21\14\6\0\4\14"+
    "\32\0\1\204\35\0\1\205\5\0\1\206\1\207\75\0"+
    "\1\210\31\0\1\211\42\0\1\212\30\0\1\213\57\0"+
    "\5\73\1\0\43\73\3\0\22\73\51\0\1\214\47\0"+
    "\1\215\4\0\1\216\45\0\4\76\2\0\44\76\2\0"+
    "\22\76\4\0\1\217\71\0\11\100\1\0\1\220\75\100"+
    "\1\221\1\222\62\100\4\102\1\103\7\102\1\0\65\102"+
    "\1\103\7\102\1\223\61\102\14\0\1\224\61\0\4\105"+
    "\1\106\10\105\1\0\64\105\1\106\10\105\1\225\60\105"+
    "\15\0\1\226\60\0\4\110\1\111\6\110\1\0\2\110"+
    "\1\0\63\110\1\111\6\110\1\0\2\110\1\227\57\110"+
    "\13\0\1\230\64\0\1\113\3\0\2\113\4\0\1\113"+
    "\4\0\30\113\6\0\4\113\13\0\4\114\1\115\12\114"+
    "\2\0\61\114\1\115\13\114\1\0\55\114\20\0\1\231"+
    "\55\0\5\232\1\0\70\232\3\0\1\120\3\0\1\121"+
    "\17\0\1\121\20\0\1\120\30\0\1\123\4\0\1\233"+
    "\3\0\1\233\33\0\1\123\31\0\1\233\74\0\1\123"+
    "\44\0\1\123\27\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\1\14\1\234\26\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\13\14\1\235\2\14"+
    "\1\140\11\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\13\14\1\236\14\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\6\14"+
    "\1\237\5\14\1\140\13\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\24\14\1\240\3\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\12\14\1\241\15\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\1\14\1\242\26\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\6\14\1\243\21\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\1\14\1\244\7\14"+
    "\1\245\16\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\12\14\1\246\15\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\3\14"+
    "\1\172\24\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\7\14\1\247\20\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\3\14"+
    "\1\250\11\14\1\251\12\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\12\14\1\252\15\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\6\14\1\253\2\14\1\254\16\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\13\14"+
    "\1\255\14\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\6\14\1\256\21\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\10\14"+
    "\1\257\17\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\16\14\1\254\11\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\16\14"+
    "\1\260\11\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\1\14\1\261\26\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\1\262"+
    "\27\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\17\14\1\263\10\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\23\14\1\264"+
    "\4\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\10\14\1\254\17\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\2\14\1\265"+
    "\25\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\3\14\1\266\2\14\1\267\6\14\1\270"+
    "\12\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\1\14\1\271\7\14\1\272\16\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\10\14\1\253\6\14\1\273\10\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\3\14\1\274"+
    "\24\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\16\14\1\275\11\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\26\14\1\140"+
    "\1\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\11\14\1\276\1\14\1\277\5\14\1\300"+
    "\6\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\13\14\1\301\14\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\1\14\1\140"+
    "\26\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\7\14\1\302\20\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\2\14\1\140"+
    "\14\14\1\303\10\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\5\14\1\153\22\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\6\14\1\304\21\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\2\14\1\305\14\14\1\306"+
    "\10\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\2\14\1\307\25\14\6\0\4\14\27\0"+
    "\1\310\41\0\1\311\64\0\1\312\30\0\12\100\1\221"+
    "\1\0\74\100\1\221\63\100\4\0\1\313\111\0\1\314"+
    "\61\0\1\315\111\0\1\316\61\0\1\317\75\0\1\123"+
    "\73\0\1\14\3\0\2\14\4\0\1\14\4\0\2\14"+
    "\1\320\25\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\6\14\1\321\21\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\6\14"+
    "\1\322\21\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\1\240\27\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\6\14\1\323"+
    "\21\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\5\14\1\324\22\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\10\14\1\140"+
    "\17\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\6\14\1\325\21\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\1\14\1\326"+
    "\26\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\15\14\1\327\12\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\1\256\27\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\15\14\1\330\12\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\2\14\1\331\25\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\1\14\1\332\26\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\10\14\1\265\17\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\6\14\1\140\21\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\6\14\1\333\21\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\2\14\1\334\25\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\6\14\1\335\21\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\5\14\1\336\22\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\3\14\1\337\24\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\4\14\1\336\23\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\21\14\1\140\6\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\6\14\1\340\21\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\6\14\1\341\21\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\26\14\1\342\1\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\13\14\1\343\14\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\12\14\1\344\1\345\14\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\13\14\1\346"+
    "\14\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\1\14\1\347\4\14\1\140\21\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\17\14\1\350\10\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\17\14\1\351\10\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\6\14\1\352\21\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\13\14\1\353\14\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\17\14\1\354\10\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\1\355\27\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\5\14"+
    "\1\356\22\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\13\14\1\357\14\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\17\14"+
    "\1\360\10\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\2\14\1\254\25\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\3\14"+
    "\1\160\24\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\3\14\1\361\24\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\11\14"+
    "\1\362\16\14\6\0\4\14\27\0\1\363\140\0\1\364"+
    "\16\0\14\102\1\0\61\102\4\105\1\365\10\105\1\0"+
    "\60\105\4\110\1\366\6\110\1\0\62\110\2\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\3\14\1\367\24\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\11\14\1\370\16\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\7\14\1\371\20\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\11\14\1\372\16\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\2\14\1\330\25\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\2\14\1\373\25\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\1\374\27\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\2\14\1\240\25\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\7\14\1\140\20\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\16\14\1\375\11\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\14\14\1\376\13\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\12\14\1\240\15\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\14\14\1\140\13\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\11\14\1\377\16\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\17\14\1\254\10\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\11\14\1\u0100\16\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\10\14\1\u0101\17\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\7\14\1\240\20\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\1\u0102\27\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\6\14"+
    "\1\u0103\21\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\6\14\1\u0104\21\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\6\14"+
    "\1\u0105\21\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\23\14\1\140\4\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\1\357"+
    "\27\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\16\14\1\140\11\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\2\14\1\u0106"+
    "\25\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\6\14\1\u0107\21\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\1\304\27\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\5\14\1\u0108\22\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\10\14\1\u0109\17\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\1\14\1\362\26\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\15\14\1\u010a\12\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\16\14\1\342\11\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\3\14\1\250\24\14"+
    "\6\0\4\14\73\0\1\u010b\15\0\4\105\1\106\10\105"+
    "\1\u010c\60\105\4\110\1\u010d\6\110\1\0\62\110\2\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\4\14\1\u010e"+
    "\23\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\1\14\1\u010f\26\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\16\14\1\u0110"+
    "\11\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\25\14\1\u0111\2\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\11\14\1\u0112"+
    "\16\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\7\14\1\u0113\20\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\6\14\1\u0114"+
    "\21\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\u0115\4\0\30\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\12\14\1\u0116\15\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\21\14\1\u0117\6\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\1\u0118\27\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\1\14"+
    "\1\254\26\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\16\14\1\u0119\11\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\2\14"+
    "\1\u011a\25\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\11\14\1\u011b\16\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\6\14"+
    "\1\351\21\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\7\14\1\u011c\20\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\17\14"+
    "\1\240\10\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\6\14\1\u011d\21\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\25\14"+
    "\1\u0119\2\14\6\0\4\14\74\0\1\u011e\20\0\1\u011f"+
    "\71\0\4\110\1\u010d\6\110\1\0\2\110\1\u0120\57\110"+
    "\2\0\1\14\3\0\2\14\4\0\1\14\4\0\5\14"+
    "\1\u0102\22\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\15\14\1\u0121\12\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\3\14"+
    "\1\u0122\24\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\3\14\1\u0123\24\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\6\14"+
    "\1\u0124\21\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\13\14\1\254\14\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\2\14"+
    "\1\u0125\25\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\11\14\1\u0126\16\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\1\u0113"+
    "\27\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\3\14\1\u0127\24\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\u0128\4\0\30\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\3\14\1\u0129\24\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\1\14\1\334\26\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\11\14\1\u012a\16\14\6\0\4\14\15\0\1\14\3\0"+
    "\2\14\4\0\1\14\4\0\16\14\1\u012b\11\14\6\0"+
    "\4\14\15\0\1\14\3\0\2\14\4\0\1\14\4\0"+
    "\7\14\1\u012c\20\14\6\0\4\14\75\0\1\u012d\13\0"+
    "\15\105\1\0\60\105\4\110\1\u010d\6\110\1\0\2\110"+
    "\1\0\57\110\2\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\2\14\1\u012e\25\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\7\14\1\u012f\20\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\1\14\1\271\26\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\13\14\1\240\14\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\6\14\1\u0130\21\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\6\14\1\u0131\21\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\1\u0132\5\14\1\u0133\21\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\7\14\1\u0134"+
    "\20\14\6\0\4\14\15\0\1\14\3\0\2\14\4\0"+
    "\1\14\4\0\3\14\1\u0135\24\14\6\0\4\14\15\0"+
    "\1\14\3\0\2\14\4\0\1\14\4\0\1\u0136\2\14"+
    "\1\u0122\24\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\1\14\1\u0137\26\14\6\0\4\14"+
    "\74\0\1\u0138\16\0\1\14\3\0\2\14\4\0\1\u0139"+
    "\4\0\30\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\22\14\1\140\5\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\20\14"+
    "\1\u013a\7\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\11\14\1\140\16\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\1\14"+
    "\1\132\26\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\17\14\1\u013b\10\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\22\14"+
    "\1\u013c\5\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\7\14\1\u013d\20\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\7\14"+
    "\1\u013e\20\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\u013f\4\0\30\14\6\0\4\14\71\0\1\u0140"+
    "\21\0\1\14\3\0\2\14\4\0\1\14\4\0\15\14"+
    "\1\u0141\12\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\14\4\0\5\14\1\u0142\22\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\6\14"+
    "\1\253\21\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\u0143\4\0\30\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\22\14\1\u0144\5\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\1\14\1\u012e\26\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\7\14\1\u0145\20\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\2\14\1\u0146\25\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\6\14\1\374\21\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\11\14\1\u0147\16\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\u0148\4\0\30\14\6\0\4\14"+
    "\15\0\1\14\3\0\2\14\4\0\1\14\4\0\15\14"+
    "\1\155\12\14\6\0\4\14\15\0\1\14\3\0\2\14"+
    "\4\0\1\u0149\4\0\30\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\3\14\1\u014a\24\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\3\14\1\u014b\24\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\11\14\1\u014c\16\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\4\14\1\u014d\23\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\7\14\1\u014e\20\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\6\14\1\161\21\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\17\14\1\u0110\10\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\11\14\1\u014f\16\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\1\14\1\u0150\26\14"+
    "\6\0\4\14\15\0\1\14\3\0\2\14\4\0\1\14"+
    "\4\0\2\14\1\u0151\25\14\6\0\4\14\15\0\1\14"+
    "\3\0\2\14\4\0\1\14\4\0\5\14\1\302\22\14"+
    "\6\0\4\14\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\4\1\1\0\1\1\1\11\5\1\1\11\2\1"+
    "\4\11\25\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\10\11\24\1\4\0\1\1\6\11\52\1\1\11\1\0"+
    "\5\11\1\1\4\11\1\0\1\1\1\11\5\0\2\11"+
    "\2\0\54\1\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\43\1\1\11\1\0\26\1\2\0\21\1\2\0"+
    "\15\1\1\0\12\1\1\0\7\1\1\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  public _XqyLexer() {
    this((java.io.Reader)null);
  }


  public _XqyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _XqyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1318) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_RIGHT_BRACE;
          }
        case 64: break;
        case 2: 
          { return XqyTypes.XQY_XML_COMMENT_CONTENTS;
          }
        case 65: break;
        case 12: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_PLUS_SIGN;
          }
        case 66: break;
        case 26: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_LEFT_BRACE;
          }
        case 67: break;
        case 30: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_COMMA;
          }
        case 68: break;
        case 55: 
          { string.append("'") ;
          }
        case 69: break;
        case 52: 
          { string.append('"') ;
          }
        case 70: break;
        case 38: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_DOTDOT;
          }
        case 71: break;
        case 18: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_QMARK;
          }
        case 72: break;
        case 56: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_COMMENT_END;
          }
        case 73: break;
        case 43: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_GREATER_EQUAL;
          }
        case 74: break;
        case 19: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_GT;
          }
        case 75: break;
        case 28: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_AT_SIGN;
          }
        case 76: break;
        case 14: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_COLON;
          }
        case 77: break;
        case 62: 
          { yybegin(XML_COMMENT); return XqyTypes.XQY_XML_COMMENT_START;
          }
        case 78: break;
        case 9: 
          { return XqyTypes.XQY_NUMBER;
          }
        case 79: break;
        case 59: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_CHAR_HEX_REF_START;
          }
        case 80: break;
        case 48: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_NOT_EQUAL;
          }
        case 81: break;
        case 11: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_DOT;
          }
        case 82: break;
        case 36: 
          { string.append('\\');
          }
        case 83: break;
        case 23: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_SLASH;
          }
        case 84: break;
        case 53: 
          { string.append('\r');
          }
        case 85: break;
        case 8: 
          { return XqyTypes.XQY_ID;
          }
        case 86: break;
        case 51: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_CHAR_REF_START;
          }
        case 87: break;
        case 45: 
          { yybegin(PI); return XqyTypes.XQY_PI_START;
          }
        case 88: break;
        case 37: 
          { yybegin(PRAGMA); return XqyTypes.XQY_ID;
          }
        case 89: break;
        case 16: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_MINUS_SIGN;
          }
        case 90: break;
        case 61: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_CDATA_END;
          }
        case 91: break;
        case 49: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_EMPTY_TAG_END;
          }
        case 92: break;
        case 42: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_OP_BIND;
          }
        case 93: break;
        case 17: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_RIGHT_BRACKET;
          }
        case 94: break;
        case 20: 
          { string.setLength(0); yybegin(STRING_QUOTE);
          }
        case 95: break;
        case 1: 
          { return XqyTypes.XQY_COMMENT_CONTENTS;
          }
        case 96: break;
        case 47: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_LESS_EQUAL;
          }
        case 97: break;
        case 46: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_END_TAG_START;
          }
        case 98: break;
        case 63: 
          { yybegin(CDATA); return XqyTypes.XQY_CDATA_START;
          }
        case 99: break;
        case 25: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_AMP;
          }
        case 100: break;
        case 44: 
          { return XqyTypes.XQY_KEYWORD;
          }
        case 101: break;
        case 4: 
          { return XqyTypes.XQY_PRAGMA_CONTENTS;
          }
        case 102: break;
        case 21: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_LT;
          }
        case 103: break;
        case 5: 
          { return XqyTypes.XQY_PI_CONTENTS;
          }
        case 104: break;
        case 33: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_STAR;
          }
        case 105: break;
        case 24: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_EQUAL;
          }
        case 106: break;
        case 6: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 107: break;
        case 10: 
          { string.setLength(0); yybegin(STRING_APOST);
          }
        case 108: break;
        case 54: 
          { string.append('\n');
          }
        case 109: break;
        case 15: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_RIGHT_PAREN;
          }
        case 110: break;
        case 35: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_STRING;
          }
        case 111: break;
        case 3: 
          { return XqyTypes.XQY_CDATA_CONTENTS;
          }
        case 112: break;
        case 13: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_LEFT_PAREN;
          }
        case 113: break;
        case 60: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_XML_COMMENT_END;
          }
        case 114: break;
        case 58: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_PI_END;
          }
        case 115: break;
        case 40: 
          { yybegin(PRAGMA_QNAME); return XqyTypes.XQY_PRAGMA_START;
          }
        case 116: break;
        case 32: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_VERT_BAR;
          }
        case 117: break;
        case 7: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 118: break;
        case 31: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_DOLLAR;
          }
        case 119: break;
        case 57: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_PRAGMA_END;
          }
        case 120: break;
        case 39: 
          { yybegin(COMMENT); return XqyTypes.XQY_COMMENT_START;
          }
        case 121: break;
        case 22: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_LEFT_BRACKET;
          }
        case 122: break;
        case 50: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_SLASH_SLASH;
          }
        case 123: break;
        case 34: 
          { string.append( yytext() );
          }
        case 124: break;
        case 41: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_AXIS;
          }
        case 125: break;
        case 29: 
          { yybegin(YYINITIAL); return XqyTypes.XQY_SEMICOLON;
          }
        case 126: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
