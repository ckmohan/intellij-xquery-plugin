{
  classHeader="header.txt"
  parserClass="uk.co.overstory.parser.GrammarParser"
  stubParserClass="org.intellij.grammar.parser.GrammarParserUtil"

  implements="uk.co.overstory.xquery.psi.XqyCompositeElement"
  extends="uk.co.overstory.xquery.psi.impl.XqyCompositeElementImpl"

  psiClassPrefix="Xqy"
  psiImplClassSuffix="Impl"
  psiPackage="uk.co.overstory.xquery.psi"
  psiImplPackage="uk.co.overstory.xquery.psi.impl"

  elementTypeHolderClass="uk.co.overstory.xquery.psi.XqyTypes"
  elementTypePrefix="XQY_"
  elementTypeClass="uk.co.overstory.xquery.psi.XqyCompositeElementType"
  tokenTypeClass="uk.co.overstory.xquery.psi.XqyTokenType"

  // tokens
  CDATA_START="<![CDATA["
  CDATA_END="]>"
  OP_BIND=":="
//  APOST="\u0027"
//  DBL_QUOTE="\u0022"
  EQUAL="="
  NOT_EQUAL="!="
  LESS_EQUAL="<="
  GREATER_EQUAL=">="
  DOC_BEFORE="<<"
  DOC_AFTER=">>"
  VERT_BAR="|"
  QMARK="?"
  PLUS_SIGN="+"
  MINUS_SIGN="-"
  STAR="*"
  AT_SIGN="@"
  HASH="#"
  SEMICOLON=";"
  COLON=":"
  UNDERSCORE="_"
  LEFT_PAREN="("
  RIGHT_PAREN=")"
  LEFT_BRACE="{"
  RIGHT_BRACE="}"
  LEFT_BRACKET="["
  RIGHT_BRACKET="]"
  LT="<"
  GT=">"
  END_TAG_START="</"
  EMPTY_TAG_END="/>"
  DOLLAR="$"
  AMP="&"
  COMMA=","
  DOT="."
  DOTDOT=".."
  AXIS="::"
  SLASH="/"
  SLASH_SLASH="//"
  PRAGMA_START="(#"
  PRAGMA_END="#)"
  DBL_LEFT_BRACE="{{"
  DBL_RIGHT_BRACE="}}"
  XML_COMMENT_START="<!--"
  XML_COMMENT_END="-->"
  PI_START="<?"
  PI_END="?>"
  CHAR_REF_START="&#"
  CHAR_HEX_REF_START="&#x"

  implements("QName")="uk.co.overstory.xquery.psi.XqyNamedElement"
  extends("QName")="uk.co.overstory.xquery.psi.impl.XqyNamedElementImpl"
/*
  implements("Predicate|EnclosedExpr|ParenthesizedExpr|Comment")="uk.co.overstory.xquery.psi.XqyParenthesized"

  mixin("reference_or_token")="uk.co.overstory.xquery.psi.impl.XqyRefOrTokenImpl"
  mixin("string_literal_expression")="uk.co.overstory.xquery.psi.impl.XqyStringImpl"
*/
}


XQuery   ::= Module EOF
Module   ::= VersionDecl? ( LibraryModule | MainModuleSequence )
VersionDecl ::= 'xquery' 'version' StringLiteral ( 'encoding' StringLiteral )? Separator

MainModuleSequence ::= MainModule ( ';' VersionDecl? MainModule)* ';'?

MainModule ::= Prolog QueryBody
LibraryModule ::= ModuleDecl Prolog
ModuleDecl ::= 'module' 'namespace' NCName '=' URILiteral Separator
Prolog   ::= ( ( DefaultNamespaceDecl | Setter | NamespaceDecl | Import ) Separator )* ( ( VarDecl | FunctionDecl | OptionDecl ) Separator )*
Setter   ::= BoundarySpaceDecl
           | DefaultCollationDecl
           | BaseURIDecl
           | ConstructionDecl
           | OrderingModeDecl
           | EmptyOrderDecl
           | CopyNamespacesDecl
Import   ::= SchemaImport | ModuleImport | ImportStylesheetDecl
Separator ::= ';'
NamespaceDecl ::= 'declare' 'namespace' NCName '=' URILiteral
BoundarySpaceDecl ::= 'declare' 'boundary-space' ( 'preserve' | 'strip' )
DefaultNamespaceDecl ::= 'declare' 'default' ( 'element' | 'function' ) 'namespace' URILiteral

ImportStylesheetDecl ::= 'import' 'stylesheet' 'at' StringLiteral

OptionDecl ::= 'declare' 'option' QName StringLiteral
OrderingModeDecl ::= 'declare' 'ordering' ( 'ordered' | 'unordered' )
EmptyOrderDecl ::= 'declare' 'default' 'order' 'empty' ( 'greatest' | 'least' )
CopyNamespacesDecl ::= 'declare' 'copy-namespaces' PreserveMode ',' InheritMode
PreserveMode ::= 'preserve' | 'no-preserve'
InheritMode ::= 'inherit' | 'no-inherit'
DefaultCollationDecl ::= 'declare' 'default' 'collation' URILiteral
BaseURIDecl ::= 'declare' 'base-uri' URILiteral
SchemaImport ::= 'import' 'schema' SchemaPrefix? URILiteral ( 'at' URILiteral ( ',' URILiteral )* )?
SchemaPrefix ::= 'namespace' NCName '=' | 'default' 'element' 'namespace'
ModuleImport ::= 'import' 'module' ( 'namespace' NCName '=' )? URILiteral ( 'at' URILiteral ( ',' URILiteral )* )?
VarDecl  ::= 'declare' 'private'? 'variable' '$' QName TypeDeclaration? ( ':=' ExprSingle | 'external' )
ConstructionDecl ::= 'declare' 'construction' ( 'strip' | 'preserve' )
FunctionDecl ::= 'declare' 'private'? 'function' FunctionName '(' ParamList? ')' ( 'as' SequenceType )? ( EnclosedExpr | 'external' )
ParamList ::= Param ( ',' Param )*
Param    ::= '$' QName TypeDeclaration?
EnclosedExpr ::= '{' Expr '}'
QueryBody ::= Expr
Expr     ::= ExprSingle ( ',' ExprSingle )*
ExprSingle ::= FLWORExpr | QuantifiedExpr | TypeswitchExpr | IfExpr | OrExpr | TryCatchExpr

TryCatchExpr ::= 'try' EnclosedExpr 'catch' '(' '$' VarName ')' EnclosedExprExtended
EnclosedExprExtended ::= '{' Expr? '}'

FLWORExpr ::= ( ForClause | LetClause )+ WhereClause? OrderByClause? 'return' ExprSingle
ForClause ::= 'for' '$' VarName TypeDeclaration? PositionalVar? 'in' ExprSingle ( ',' '$' VarName TypeDeclaration? PositionalVar? 'in' ExprSingle )*
PositionalVar ::= 'at' '$' VarName
LetClause ::= 'let' '$' VarName TypeDeclaration? ':=' ExprSingle ( ',' '$' VarName TypeDeclaration? ':=' ExprSingle )*
WhereClause ::= 'where' ExprSingle
OrderByClause ::= ( 'order' 'by' | 'stable' 'order' 'by' ) OrderSpecList
OrderSpecList ::= OrderSpec ( ',' OrderSpec )*
OrderSpec ::= ExprSingle OrderModifier
OrderModifier ::= ( 'ascending' | 'descending' )? ( 'empty' ( 'greatest' | 'least' ) )? ( 'collation' URILiteral )?
QuantifiedExpr ::= ( 'some' | 'every' ) '$' VarName TypeDeclaration? 'in' ExprSingle ( ',' '$' VarName TypeDeclaration? 'in' ExprSingle )* 'satisfies' ExprSingle
TypeswitchExpr ::= 'typeswitch' '(' Expr ')' CaseClause+ 'default' ( '$' VarName )? 'return' ExprSingle
CaseClause ::= 'case' ( '$' VarName 'as' )? SequenceType 'return' ExprSingle
IfExpr   ::= 'if' '(' Expr ')' 'then' ExprSingle 'else' ExprSingle
OrExpr   ::= AndExpr ( 'or' AndExpr )*
AndExpr  ::= ComparisonExpr ( 'and' ComparisonExpr )*
ComparisonExpr ::= RangeExpr ( ( ValueComp | GeneralComp | NodeComp ) RangeExpr )?
RangeExpr ::= AdditiveExpr ( 'to' AdditiveExpr )?
AdditiveExpr ::= MultiplicativeExpr ( ( '+' | '-' ) MultiplicativeExpr )*
MultiplicativeExpr ::= UnionExpr ( ( '*' | 'div' | 'idiv' | 'mod' ) UnionExpr )*
UnionExpr ::= IntersectExceptExpr ( ( 'union' | '|' ) IntersectExceptExpr )*
IntersectExceptExpr ::= InstanceofExpr ( ( 'intersect' | 'except' ) InstanceofExpr )*
InstanceofExpr ::= TreatExpr ( 'instance' 'of' SequenceType )?
TreatExpr ::= CastableExpr ( 'treat' 'as' SequenceType )?
CastableExpr ::= CastExpr ( 'castable' 'as' SingleType )?
CastExpr ::= UnaryExpr ( 'cast' 'as' SingleType )?
UnaryExpr ::= ( '-' | '+' )* ValueExpr
ValueExpr ::= ValidateExpr | PathExpr | ExtensionExpr
GeneralComp ::= '=' | '!=' | '<' | '<=' | '>' | '>='
ValueComp ::= 'eq' | 'ne' | 'lt' | 'le' | 'gt' | 'ge'
NodeComp ::= 'is' | '<<' | '>>'
ValidateExpr ::= 'validate' ('as' QName | ValidationMode)? 'full'? '{' Expr '}'
ValidationMode ::= 'lax' | 'strict'
ExtensionExpr ::= Pragma+ '{' Expr? '}'
Pragma   ::= '(#' S? QName ( S PragmaContents )? '#)'
          /* ws: explicit */
PathExpr ::= '/' ( RelativePathExpr '/' ) | '//' RelativePathExpr | RelativePathExpr
RelativePathExpr ::= StepExpr ( ( '/' | '//' ) StepExpr )*
StepExpr ::= FilterExpr | AxisStep
AxisStep ::= ( ReverseStep | ForwardStep ) PredicateList
ForwardStep ::= ForwardAxis NodeTest | AbbrevForwardStep
ForwardAxis ::= 'child' '::'
           | 'descendant' '::'
           | 'attribute' '::'
           | 'namespace' '::'
           | 'self' '::'
           | 'property' '::'
           | 'descendant-or-self' '::'
           | 'following-sibling' '::'
           | 'following' '::'
AbbrevForwardStep ::= '@'? NodeTest
ReverseStep ::= ReverseAxis NodeTest | AbbrevReverseStep
ReverseAxis
         ::= 'parent' '::'
           | 'ancestor' '::'
           | 'preceding-sibling' '::'
           | 'preceding' '::'
           | 'ancestor-or-self' '::'

AbbrevReverseStep ::= '..'
NodeTest ::= KindTest | NameTest
NameTest ::= QName | Wildcard
FilterExpr ::= PrimaryExpr PredicateList
PredicateList ::= Predicate*
Predicate ::= '[' Expr ']'
PrimaryExpr ::= Literal
           | VarRef
           | ParenthesizedExpr
           | ContextItemExpr
           | FunctionCall
           | OrderedExpr
           | UnorderedExpr
           | Constructor
Literal  ::= NumericLiteral | StringLiteral
NumericLiteral ::= IntegerLiteral | DecimalLiteral | DoubleLiteral { extends="Literal" }
VarRef   ::= '$' VarName
VarName  ::= QName
ParenthesizedExpr ::= '(' Expr? ')'
ContextItemExpr ::= '.'
OrderedExpr ::= 'ordered' '{' Expr '}'
UnorderedExpr ::= 'unordered' '{' Expr '}'
FunctionCall ::= FunctionName '(' ( ExprSingle ( ',' ExprSingle )* )? ')'
Constructor ::= DirectConstructor | ComputedConstructor
DirectConstructor ::= DirElemConstructor | DirCommentConstructor | DirPIConstructor
DirElemConstructor ::= '<' QName DirAttributeList ( '/>' | '>' DirElemContent* '</' QName S? '>' )
          /* ws: explicit */
DirAttributeList ::= ( S ( QName S? '=' S? DirAttributeValue )? )*
          /* ws: explicit */
DirAttributeValue
         ::= Dbl_Quote ( EscapeQuot | QuotAttrValueContent )* Dbl_Quote
           | Apost ( EscapeApos | AposAttrValueContent )* Apost
QuotAttrValueContent ::= QuotAttrContentChar | CommonContent
AposAttrValueContent ::= AposAttrContentChar | CommonContent
          /* ws: explicit */
DirElemContent ::= DirectConstructor | CDataSection | CommonContent | ElementContentChar
CommonContent ::= PredefinedEntityRef | CharRef | '{{' | '}}' | EnclosedExpr
DirCommentConstructor ::= '<!--' DirCommentContents '-->'
          /* ws: explicit */
DirPIConstructor ::= '<?' PITarget ( S DirPIContents )? '?>'
          /* ws: explicit */
ComputedConstructor
         ::= CompDocConstructor
           | CompElemConstructor
           | CompAttrConstructor
           | CompTextConstructor
           | CompCommentConstructor
           | CompPIConstructor
           | CompBinaryConstructor
           | CompNamespaceConstructor

CompBinaryConstructor ::= 'binary' EnclosedExprExtended
CompNamespaceConstructor ::= 'namespace' ( QName | '{' Expr '}' ) EnclosedExprExtended

CompDocConstructor ::= 'document' '{' Expr '}'
CompElemConstructor ::= 'element' ( QName | '{' Expr '}' ) '{' ContentExpr? '}'
ContentExpr ::= Expr
CompAttrConstructor ::= 'attribute' ( QName | '{' Expr '}' ) '{' Expr? '}'
CompTextConstructor ::= 'text' EnclosedExprExtended
CompCommentConstructor ::= 'comment' '{' Expr '}'
CompPIConstructor ::= 'processing-instruction' ( NCName | '{' Expr '}' ) '{' Expr? '}'
SingleType ::= AtomicType OccurrenceIndicator?
//SingleType ::= AtomicType ('?'|'*'^OccurrenceIndicator)?
TypeDeclaration ::= 'as' SequenceType
SequenceType ::= 'empty-sequence' '(' ')' | ItemType OccurrenceIndicator?
OccurrenceIndicator ::= '?' | '*' | '+'
//OccurrenceIndicator ::= '?' | '*'^OccurrenceIndicator | '+'^OccurrenceIndicator
ItemType ::= KindTest | 'item' '(' ')' | AtomicType
AtomicType ::= QName
KindTest ::= DocumentTest
           | ElementTest
           | AttributeTest
           | SchemaElementTest
           | SchemaAttributeTest
           | PITest
           | CommentTest
           | TextTest
           | AnyKindTest
           | BinaryTest
BinaryTest ::= 'binary' '(' ')'
AnyKindTest ::= 'node' '(' ')'
DocumentTest ::= 'document-node' '(' ( ElementTest | SchemaElementTest )? ')'
TextTest ::= 'text' '(' ')'
CommentTest ::= 'comment' '(' ')'
PITest   ::= 'processing-instruction' '(' ( NCName | StringLiteral )? ')'
AttributeTest ::= 'attribute' '(' ( AttribNameOrWildcard ( ',' TypeName )? )? ')'
AttribNameOrWildcard ::= AttributeName | '*'
SchemaAttributeTest ::= 'schema-attribute' '(' AttributeDeclaration ')'
AttributeDeclaration ::= AttributeName
ElementTest ::= 'element' '(' ( ElementNameOrWildcard ( ',' TypeName '?'? )? )? ')'
ElementNameOrWildcard ::= ElementName | '*'
SchemaElementTest ::= 'schema-element' '(' ElementDeclaration ')'
ElementDeclaration ::= ElementName
AttributeName ::= QName
ElementName ::= QName
TypeName ::= QName
URILiteral ::= StringLiteral { extends="StringLiteral" }
zzQName    ::= FunctionName
           | 'attribute'
           | 'namespace'
           | 'binary'
           | 'comment'
           | 'document-node'
           | 'element'
           | 'empty-sequence'
           | 'if'
           | 'item'
           | 'node'
           | 'processing-instruction'
           | 'schema-attribute'
           | 'schema-element'
           | 'text'
           | 'typeswitch'
FunctionName ::= 'ancestor'
           | 'ancestor-or-self'
           | 'and'
           | 'ascending'
           | 'case'
           | 'cast'
           | 'castable'
           | 'catch'
           | 'child'
           | 'collation'
           | 'declare'
           | 'default'
           | 'descendant'
           | 'descendant-or-self'
           | 'descending'
           | 'div'
           | 'document'
           | 'else'
           | 'empty'
           | 'eq'
           | 'every'
           | 'except'
           | 'following'
           | 'following-sibling'
           | 'for'
           | 'ge'
           | 'gt'
           | 'idiv'
           | 'import'
           | 'instance'
           | 'intersect'
           | 'is'
           | 'le'
           | 'let'
           | 'lt'
           | 'mod'
           | 'module'
           | 'ne'
           | 'or'
           | 'order'
           | 'ordered'
           | 'parent'
           | 'preceding'
           | 'preceding-sibling'
           | 'property'
           | 'return'
           | 'satisfies'
           | 'self'
           | 'some'
           | 'stable'
           | 'to'
           | 'treat'
           | 'try'
           | 'union'
           | 'unordered'
           | 'validate'
           | 'where'
           | 'xquery'
           | QName
//           | QName^Token
NCName   ::= 'and'
           | 'ascending'
           | 'case'
           | 'cast'
           | 'castable'
           | 'collation'
           | 'default'
           | 'descending'
           | 'div'
           | 'else'
           | 'empty'
           | 'eq'
           | 'except'
           | 'for'
           | 'ge'
           | 'gt'
           | 'idiv'
           | 'instance'
           | 'intersect'
           | 'is'
           | 'le'
           | 'let'
           | 'lt'
           | 'mod'
           | 'ne'
           | 'or'
           | 'order'
           | 'return'
           | 'satisfies'
           | 'stable'
           | 'to'
           | 'treat'
           | 'union'
           | 'where'
//           | NCName^Token
Whitespace ::= ( S | Comment )*
//         ::= ( S^WS | Comment )*
          /* ws: definition */
Comment  ::= '(:' ( CommentContents | Comment )* ':)'
          /* ws: explicit */

//<?TOKENS?>

DirCommentContents ::= ( ( NotDash ) | '-' ( NotDash ) )*
          /* ws: explicit */
IntegerLiteral ::= Digits { extends="Literal" }
DecimalLiteral ::= '.' Digits | Digits '.' OptionalDigits { extends="Literal" }
          /* ws: explicit */
DoubleLiteral ::= ( '.' Digits | Digits ( '.' OptionalDigits )? ) ( 'e' | 'E' ) ( '+' | '-' )? Digits { extends="Literal" }
          /* ws: explicit */

StringLiteral ::= Dbl_Quote ( PredefinedEntityRef | CharRef | EscapeQuot | ( !Dbl_Quote | !"&" ) )* Dbl_Quote
           | Apost ( PredefinedEntityRef | CharRef | EscapeApos | ( !Apost | !'&' )  )* Apost { extends="Literal" }
          /* ws: explicit */
PredefinedEntityRef ::= '&' AsciiAlpha ';'
          /* ws: explicit */
NameChar ::= Letter | Digit | '.' | '-' | '_' | ':'
CharRef  ::= '&#' Digits ';' | '&#x' (Digits | Hex)+ ';'

NCName   ::= NCNameStartChar NCNameChar*
NCNameChar ::= Letter | Digit | '.' | '-' | '_'
NCNameStartChar ::= Letter | '_'
QName    ::= PrefixedName | UnprefixedName
PrefixedName ::= Prefix ':' LocalPart
UnprefixedName ::= LocalPart
Prefix   ::= NCName
LocalPart ::= NCName
PITarget ::= NCName
PragmaContents ::= ( !'#' | '#'+ !'#' )* '#'* & '#'
DirPIContents ::= ( !'?' | '?'+ ( !'?' | !'>' ) )* '?'* & '?'
CDataSection ::= '<![CDATA[' ( !']' | ']' !']' | ']' ']'+ !']' )* ']'+ ']>'
Wildcard ::= NCName ':' '*' | '*' ( ':' NCName )?
EOF      ::= 0x0000

/*
NonNCNameChar ::= '$' | ( Char - NCNameChar )
NonNCNameChar
          \\ IntegerLiteral DecimalLiteral DoubleLiteral QName^Token NCName^Token 'ancestor' 'ancestor-or-self' 'and' 'as' 'ascending' 'at' 'attribute' 'namespace' 'base-uri' 'binary' 'boundary-space' 'by' 'case' 'cast' 'castable' 'catch' 'child' 'collation' 'comment' 'construction' 'copy-namespaces' 'declare' 'default' 'descendant' 'descendant-or-self' 'descending' 'div' 'document' 'document-node' 'element' 'else' 'empty' 'empty-sequence' 'encoding' 'eq' 'every' 'except' 'external' 'following' 'following-sibling' 'for' 'function' 'private' 'ge' 'greatest' 'gt' 'full' 'idiv' 'if' 'import' 'in' 'inherit' 'instance' 'intersect' 'is' 'item' 'lax' 'le' 'least' 'let' 'lt' 'mod' 'module' 'namespace' 'ne' 'node' 'no-inherit' 'no-preserve' 'of' 'option' 'or' 'order' 'ordered' 'ordering' 'parent' 'preceding' 'preceding-sibling' 'preserve' 'processing-instruction' 'property' 'return' 'satisfies' 'schema' 'stylesheet' 'schema-attribute' 'schema-element' 'self' 'some' 'stable' 'strict' 'strip' 'text' 'then' 'to' 'treat' 'try' 'typeswitch' 'union' 'unordered' 'validate' 'variable' 'version' 'where' 'xquery'
'+'       << '+'^OccurrenceIndicator
'*'       << '*'^OccurrenceIndicator Wildcard
QName^Token
          << 'ancestor' 'ancestor-or-self' 'and' 'ascending' 'attribute' 'binary' 'catch' 'try' 'namespace' 'case' 'cast' 'castable' 'child' 'collation' 'comment' 'declare' 'default' 'descendant' 'descendant-or-self' 'descending' 'div' 'document' 'document-node' 'element' 'else' 'empty' 'empty-sequence' 'eq' 'every' 'except' 'following' 'following-sibling' 'for' 'ge' 'gt' 'idiv' 'if' 'import' 'instance' 'intersect' 'is' 'item' 'le' 'let' 'lt' 'mod' 'module' 'ne' 'node' 'or' 'order' 'ordered' 'parent' 'preceding' 'preceding-sibling' 'processing-instruction' 'property' 'return' 'satisfies' 'schema-attribute' 'schema-element' 'self' 'some' 'stable' 'text' 'to' 'treat' 'typeswitch' 'union' 'unordered' 'validate' 'where' 'xquery'
NCName^Token
          << 'and' 'ascending' 'case' 'cast' 'castable' 'collation' 'default' 'descending' 'div' 'else' 'empty' 'eq' 'except' 'for' 'ge' 'gt' 'idiv' 'instance' 'intersect' 'is' 'le' 'let' 'lt' 'mod' 'ne' 'or' 'order' 'return' 'satisfies' 'stable' 'to' 'treat' 'union' 'where'
*/
