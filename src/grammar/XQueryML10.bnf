{
  classHeader="header.txt"
  parserClass="uk.co.overstory.xquery.parser.XQueryParser"
  stubParserClass="org.intellij.grammar.parser.GrammarParserUtil"

  implements="uk.co.overstory.xquery.psi.XqyCompositeElement"
  extends="uk.co.overstory.xquery.psi.impl.XqyCompositeElementImpl"

  psiClassPrefix="Xqy"
  psiImplClassSuffix="Impl"
  psiPackage="uk.co.overstory.xquery.psi"
  psiImplPackage="uk.co.overstory.xquery.psi.impl"

  elementTypeHolderClass="uk.co.overstory.xquery.psi.XqyTypes"
  elementTypePrefix="XQY_"
  elementTypeClass="uk.co.overstory.xquery.psi.XqyCompositeElementType"
  tokenTypeClass="uk.co.overstory.xquery.psi.XqyTokenType"

  // tokens
  OP_BIND=":="
  EQUAL="="
  NOT_EQUAL="!="
  LESS_EQUAL="<="
  GREATER_EQUAL=">="
  DOC_BEFORE="<<"
  DOC_AFTER=">>"
  VERT_BAR="|"
  QMARK="?"
  PLUS_SIGN="+"
  MINUS_SIGN="-"
  STAR="*"
  AT_SIGN="@"
  SEMICOLON=";"
  COLON=":"
  UNDERSCORE="_"
  LEFT_PAREN="("
  RIGHT_PAREN=")"
  LEFT_BRACE="{"
  RIGHT_BRACE="}"
  LEFT_BRACKET="["
  RIGHT_BRACKET="]"
  LT="<"
  GT=">"
  END_TAG_START="</"
  EMPTY_TAG_END="/>"
  DOLLAR="$"
  AMP="&"
  COMMA=","
  DOT="."
  DOTDOT=".."
  AXIS="::"
  SLASH="/"
  SLASH_SLASH="//"
  DBL_LEFT_BRACE="{{"
  DBL_RIGHT_BRACE="}}"
  CHAR_REF_START="&#"
  CHAR_HEX_REF_START="&#x"

  implements("VarName|FunctionName")="uk.co.overstory.xquery.psi.XqyNamedElement"
  extends("VarName")="uk.co.overstory.xquery.psi.impl.XqyVarNameElementImpl"
  extends("FunctionName")="uk.co.overstory.xquery.psi.impl.XqyFunctionNameElementImpl"

  mixin("RefVarName")="uk.co.overstory.xquery.psi.impl.XqyVarNameReference"
  mixin("RefFunctionName")="uk.co.overstory.xquery.psi.impl.XqyFunctionNameReference"
/*
  mixin("StringLiteral")="uk.co.overstory.xquery.psi.impl.XqyStringImpl"
  implements("Predicate|EnclosedExpr|ParenthesizedExpr|Comment")="uk.co.overstory.xquery.psi.XqyParenthesized"

*/
}

external XQuery ::= parseXQuery Module

//XQuery   ::= Module
Module   ::= VersionDecl? ( LibraryModule | MainModuleSequence )
VersionDecl ::= 'xquery' 'version' XqueryVersionString ( 'encoding' XqueryEncodingString )? Separator
XqueryEncodingString ::= StringLiteral
XqueryVersionString ::= StringLiteral

MainModuleSequence ::= MainModule ( Separator VersionDecl? MainModule)* Separator?

MainModule ::= Prolog QueryBody
LibraryModule ::= ModuleDecl Prolog

ModuleDecl ::= 'module' 'namespace' NamespaceName '=' NamespaceValue Separator

Prolog   ::= ( DefaultNamespaceDecl | Setter | NamespaceDecl | Import )* ( VarDecl | FunctionDecl | OptionDecl )*
Setter   ::= BoundarySpaceDecl
           | DefaultCollationDecl
           | BaseURIDecl
           | ConstructionDecl
           | OrderingModeDecl
           | EmptyOrderDecl
           | CopyNamespacesDecl
Import   ::= SchemaImport | ModuleImport | ImportStylesheetDecl
Separator ::= ';'
//private prolog_recover ::= !(';' | QueryBody )

NamespaceDecl ::= 'declare' 'namespace' NamespaceName '=' NamespaceValue Separator
NamespaceName ::= NCName
NamespaceValue ::= URILiteral

PathHint ::= StringLiteral

BoundarySpaceDecl ::= 'declare' 'boundary-space' BoundarySpaceAction Separator {pin=2}
BoundarySpaceAction ::= ( 'preserve' | 'strip' )

DefaultNamespaceDecl ::= 'declare' 'default' DefaultNamespaceKind 'namespace' NamespaceValue Separator {pin=2}
DefaultNamespaceKind ::= ( 'element' | 'function' )

ImportStylesheetDecl ::= 'import' 'stylesheet' 'at' PathHint Separator {pin=2}

OptionDecl ::= 'declare' 'option' OptionName StringLiteral Separator {pin=2}
OptionName ::= QName
OrderingModeDecl ::= 'declare' 'ordering' ( 'ordered' | 'unordered' ) Separator {pin=2}
EmptyOrderDecl ::= 'declare' 'default' 'order' 'empty' ( 'greatest' | 'least' ) Separator {pin=3}
CopyNamespacesDecl ::= 'declare' 'copy-namespaces' PreserveMode ',' InheritMode Separator
PreserveMode ::= 'preserve' | 'no-preserve'
InheritMode ::= 'inherit' | 'no-inherit'
DefaultCollationDecl ::= 'declare' 'default' 'collation' URILiteral Separator {pin=3}
BaseURIDecl ::= 'declare' 'base-uri' URILiteral Separator {pin=2}
SchemaImport ::= 'import' 'schema' SchemaPrefix? URILiteral ( 'at' PathHint ( ',' PathHint )* )? Separator {pin=2}
SchemaPrefix ::= 'namespace' NamespaceName '=' | 'default' 'element' 'namespace' {pin=2}
ModuleImport ::= 'import' 'module' ( 'namespace' NamespaceName '=' )? NamespaceValue ( 'at' PathHint ( ',' PathHint )* )? Separator {pin=2}

DollarVarName ::= '$' VarName {pin=1}

BindSymbol ::= ':='

VarDecl  ::= 'declare' Visibility 'variable' DollarVarName TypeDeclaration? ( BindSymbol ExprSingle | 'external' ) Separator {pin=3}
Visibility ::= 'private'?

ConstructionDecl ::= 'declare' 'construction' ( 'strip' | 'preserve' ) Separator {pin=2}
FunctionDecl ::= 'declare' Visibility 'function' FunctionName '(' ParamList? ')' TypeDeclaration? ( EnclosedExpr | 'external' ) Separator {pin=4}

ParamList ::= Param ( ',' Param )*
Param    ::= DollarVarName TypeDeclaration?

EnclosedExpr ::= '{' Expr '}' {pin=1}
QueryBody ::= Expr
Expr     ::= ExprSingle ( ',' ExprSingle )*
ExprSingle ::= FLWORExpr | QuantifiedExpr | TypeswitchExpr | IfExpr | OrExpr | TryCatchExpr

TryCatchExpr ::= TryClause CatchClause
TryClause ::= 'try' EnclosedExpr
CatchClause ::= 'catch' '(' DollarVarName ')' EnclosedExprExtended
EnclosedExprExtended ::= '{' Expr? '}'

FLWORExpr ::= ( ForClause | LetClause )+ WhereClause? OrderByClause? 'return' ExprSingle
ForClause ::= 'for' ForVar ( ',' ForVar )*  {pin=1 }//{recoverUntil='flwor_recover'}
ForVar ::= DollarVarName TypeDeclaration? PositionalVar? 'in' ExprSingle
PositionalVar ::= 'at' DollarVarName
LetClause ::= 'let' LetVar ( ',' LetVar )*  {pin=1}//{recoverUntil='flwor_recover'}
LetVar ::= DollarVarName TypeDeclaration? BindSymbol ExprSingle
WhereClause ::= 'where' ExprSingle {pin=1}	 //{recoverUntil='flwor_recover'}
OrderByClause ::= ( 'order' 'by' | 'stable' 'order' 'by' ) OrderSpecList    {pin=1}//{recoverUntil='flwor_recover'}
OrderSpecList ::= OrderSpec ( ',' OrderSpec )*
OrderSpec ::= ExprSingle OrderModifier
OrderModifier ::= ( 'ascending' | 'descending' )? ( 'empty' ( 'greatest' | 'least' ) )? ( 'collation' URILiteral )?
//private flwor_recover ::= !( ForClause | LetClause | WhereClause | OrderByClause | ExprSingle)

QuantifiedExpr ::= ( 'some' | 'every' ) QuantVar ( ',' QuantVar )* 'satisfies' ExprSingle {pin=1}
QuantVar ::= DollarVarName TypeDeclaration? 'in' ExprSingle

TypeswitchExpr ::= 'typeswitch' '(' Expr ')' CaseClause+ 'default' DollarVarName? 'return' ExprSingle
CaseClause ::= 'case' CaseVar 'return' ExprSingle {pin=1}
CaseVar ::= ( DollarVarName 'as' )? SequenceType

IfExpr   ::= 'if' '(' Expr ')' 'then' ExprSingle 'else' ExprSingle {pin=1}
OrExpr   ::= AndExpr ( 'or' AndExpr )*
AndExpr  ::= ComparisonExpr ( 'and' ComparisonExpr )*
ComparisonExpr ::= RangeExpr ( ( ValueComp | GeneralComp | NodeComp ) RangeExpr )?
RangeExpr ::= AdditiveExpr ( 'to' AdditiveExpr )?
AdditiveExpr ::= MultiplicativeExpr ( ( '+' | '-' ) MultiplicativeExpr )*
MultiplicativeExpr ::= UnionExpr ( ( '*' | 'div' | 'idiv' | 'mod' ) UnionExpr )*
UnionExpr ::= IntersectExceptExpr ( ( 'union' | '|' ) IntersectExceptExpr )*
IntersectExceptExpr ::= InstanceofExpr ( ( 'intersect' | 'except' ) InstanceofExpr )*
InstanceofExpr ::= TreatExpr ( 'instance' 'of' SequenceType )?
TreatExpr ::= CastableExpr ( 'treat' 'as' SequenceType )?
CastableExpr ::= CastExpr ( 'castable' 'as' SingleType )?
CastExpr ::= UnaryExpr ( 'cast' 'as' SingleType )?
UnaryExpr ::= ( '-' | '+' )* ValueExpr
ValueExpr ::= ValidateExpr | PathExpr | ExtensionExpr
GeneralComp ::= '=' | '!=' | '<' | '<=' | '>' | '>='
ValueComp ::= 'eq' | 'ne' | 'lt' | 'le' | 'gt' | 'ge'
NodeComp ::= 'is' | '<<' | '>>'
ValidateExpr ::= 'validate' ('as' QName | ValidationMode)? 'full'? '{' Expr '}'
ValidationMode ::= 'lax' | 'strict'
ExtensionExpr ::= Pragma+ '{' Expr? '}'
          /* ws: explicit */
PathExpr ::= '/' ( RelativePathExpr '/' ) | '//' RelativePathExpr | RelativePathExpr
RelativePathExpr ::= StepExpr ( ( '/' | '//' ) StepExpr )*
StepExpr ::= FilterExpr | AxisStep
AxisStep ::= ( ReverseStep | ForwardStep ) PredicateList
ForwardStep ::= ForwardAxis NodeTest | AbbrevForwardStep
ForwardAxis ::= 'child' '::'
           | 'descendant' '::'
           | 'attribute' '::'
           | 'namespace' '::'
           | 'self' '::'
           | 'property' '::'
           | 'descendant-or-self' '::'
           | 'following-sibling' '::'
           | 'following' '::'
AbbrevForwardStep ::= '@'? NodeTest
ReverseStep ::= ReverseAxis NodeTest | AbbrevReverseStep
ReverseAxis
         ::= 'parent' '::'
           | 'ancestor' '::'
           | 'preceding-sibling' '::'
           | 'preceding' '::'
           | 'ancestor-or-self' '::'

AbbrevReverseStep ::= '..'
NodeTest ::= KindTest | NameTest
NameTest ::= QName | Wildcard
FilterExpr ::= PrimaryExpr PredicateList
PredicateList ::= Predicate*
Predicate ::= '[' Expr ']'
PrimaryExpr ::= Literal
           | VarRef
           | ParenthesizedExpr
           | ContextItemExpr
           | FunctionCall
           | OrderedExpr
           | UnorderedExpr
           | Constructor

Literal  ::= NumericLiteral | StringLiteral
NumericLiteral ::= number

VarRef  ::= '$' RefVarName
RefVarName ::= QName
VarName  ::= QName
ParenthesizedExpr ::= '(' Expr? ')'
ContextItemExpr ::= '.'
OrderedExpr ::= 'ordered' '{' Expr '}'
UnorderedExpr ::= 'unordered' '{' Expr '}'
FunctionCall ::= RefFunctionName '(' ( ExprSingle ( ',' ExprSingle )* )? ')'
Constructor ::= DirectConstructor | ComputedConstructor
DirectConstructor ::= DirElemConstructor | DirCommentConstructor | DirPIConstructor
DirElemConstructor ::= '<' QName DirAttributeList ( '/>' | '>' DirElemContent* '</' QName '>' )
          /* ws: explicit */

/* DirAttributeList ::= ( S ( QName S? '=' S? DirAttributeValue )? )* */
DirAttributeList ::= ( QName '=' DirAttributeValue )*
          /* ws: explicit */
DirAttributeValue ::= string

/*
QuotAttrValueContent ::= QuotAttrContentChar | CommonContent
AposAttrValueContent ::= AposAttrContentChar | CommonContent
*/
          /* ws: explicit */
DirElemContent ::= DirectConstructor | CDataSection | CommonContent | ElementContentChar
CommonContent ::= PredefinedEntityRef | CharRef | '{{' | '}}' | EnclosedExpr
          /* ws: explicit */
ComputedConstructor
         ::= CompDocConstructor
           | CompElemConstructor
           | CompAttrConstructor
           | CompTextConstructor
           | CompCommentConstructor
           | CompPIConstructor
           | CompBinaryConstructor
           | CompNamespaceConstructor

ElementContentChar ::= ELEMENT_CONTENT_CHAR

CompBinaryConstructor ::= 'binary' EnclosedExprExtended
CompNamespaceConstructor ::= 'namespace' ( NamespaceName | '{' Expr '}' ) EnclosedExprExtended

CompDocConstructor ::= 'document' '{' Expr '}'
CompElemConstructor ::= 'element' ( ElementName | '{' Expr '}' ) '{' ContentExpr? '}'
ContentExpr ::= Expr
CompAttrConstructor ::= 'attribute' ( AttributeName | '{' Expr '}' ) '{' Expr? '}'
CompTextConstructor ::= 'text' EnclosedExprExtended
CompCommentConstructor ::= 'comment' '{' Expr '}'
CompPIConstructor ::= 'processing-instruction' ( PIName | '{' Expr '}' ) '{' Expr? '}'
SingleType ::= AtomicType OccurrenceIndicator?
//SingleType ::= AtomicType ('?'|'*'^OccurrenceIndicator)?

TypeDeclaration ::= 'as' SequenceType
SequenceType ::= EmptySequenceTest | ItemType OccurrenceIndicator?
OccurrenceIndicator ::= '?' | '*' | '+'

//OccurrenceIndicator ::= '?' | '*'^OccurrenceIndicator | '+'^OccurrenceIndicator
ItemType ::= KindTest | ItemTest | AtomicType
AtomicType ::= QName
KindTest ::= DocumentTest
           | ElementTest
           | AttributeTest
           | SchemaElementTest
           | SchemaAttributeTest
           | PITest
           | CommentTest
           | TextTest
           | AnyKindTest
           | BinaryTest
EmptySequenceTest ::= 'empty-sequence' '(' ')'
ItemTest ::= 'item' '(' ')'
BinaryTest ::= 'binary' '(' ')'
AnyKindTest ::= 'node' '(' ')'
DocumentTest ::= 'document-node' '(' ( ElementTest | SchemaElementTest )? ')'
TextTest ::= 'text' '(' ')'
CommentTest ::= 'comment' '(' ')'
PITest   ::= 'processing-instruction' '(' ( NCName | StringLiteral )? ')'
AttributeTest ::= 'attribute' '(' ( AttribNameOrWildcard ( ',' TypeName )? )? ')'
AttribNameOrWildcard ::= AttributeName | '*'
SchemaAttributeTest ::= 'schema-attribute' '(' AttributeDeclaration ')'
AttributeDeclaration ::= AttributeName
ElementTest ::= 'element' '(' ( ElementNameOrWildcard ( ',' TypeName '?'? )? )? ')'
ElementNameOrWildcard ::= ElementName | '*'
SchemaElementTest ::= 'schema-element' '(' ElementDeclaration ')'
ElementDeclaration ::= ElementName
AttributeName ::= QName
ElementName ::= QName
TypeName ::= QName
PIName ::= NCName
URILiteral ::= StringLiteral { extends="StringLiteral" }

Keyword ::= FunctionName | FunctionQname | OpNCName

FunctionName ::= QName
RefFunctionName ::= QName

// Keyword ::= 'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' | 'attribute' | 'binary' | 'catch' | 'try' | 'namespace' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'declare' | 'default' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'module' | 'ne' | 'node' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'property' | 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' | 'unordered' | 'validate' | 'where' | 'xquery'

/*
NonNCNameChar
          \\ IntegerLiteral DecimalLiteral DoubleLiteral QName^Token NCName^Token 'ancestor' 'ancestor-or-self' 'and' 'as' 'ascending' 'at' 'attribute' 'namespace' 'base-uri' 'binary' 'boundary-space' 'by' 'case' 'cast' 'castable' 'catch' 'child' 'collation' 'comment' 'construction' 'copy-namespaces' 'declare' 'default' 'descendant' 'descendant-or-self' 'descending' 'div' 'document' 'document-node' 'element' 'else' 'empty' 'empty-sequence' 'encoding' 'eq' 'every' 'except' 'external' 'following' 'following-sibling' 'for' 'function' 'private' 'ge' 'greatest' 'gt' 'full' 'idiv' 'if' 'import' 'in' 'inherit' 'instance' 'intersect' 'is' 'item' 'lax' 'le' 'least' 'let' 'lt' 'mod' 'module' 'namespace' 'ne' 'node' 'no-inherit' 'no-preserve' 'of' 'option' 'or' 'order' 'ordered' 'ordering' 'parent' 'preceding' 'preceding-sibling' 'preserve' 'processing-instruction' 'property' 'return' 'satisfies' 'schema' 'stylesheet' 'schema-attribute' 'schema-element' 'self' 'some' 'stable' 'strict' 'strip' 'text' 'then' 'to' 'treat' 'try' 'typeswitch' 'union' 'unordered' 'validate' 'variable' 'version' 'where' 'xquery'
'+'       << '+'^OccurrenceIndicator
'*'       << '*'^OccurrenceIndicator Wildcard
QName^Token
          << 'ancestor' 'ancestor-or-self' 'and' 'ascending' 'attribute' 'binary' 'catch' 'try' 'namespace' 'case' 'cast' 'castable' 'child' 'collation' 'comment' 'declare' 'default' 'descendant' 'descendant-or-self' 'descending' 'div' 'document' 'document-node' 'element' 'else' 'empty' 'empty-sequence' 'eq' 'every' 'except' 'following' 'following-sibling' 'for' 'ge' 'gt' 'idiv' 'if' 'import' 'instance' 'intersect' 'is' 'item' 'le' 'let' 'lt' 'mod' 'module' 'ne' 'node' 'or' 'order' 'ordered' 'parent' 'preceding' 'preceding-sibling' 'processing-instruction' 'property' 'return' 'satisfies' 'schema-attribute' 'schema-element' 'self' 'some' 'stable' 'text' 'to' 'treat' 'typeswitch' 'union' 'unordered' 'validate' 'where' 'xquery'
NCName^Token
          << 'and' 'ascending' 'case' 'cast' 'castable' 'collation' 'default' 'descending' 'div' 'else' 'empty' 'eq' 'except' 'for' 'ge' 'gt' 'idiv' 'instance' 'intersect' 'is' 'le' 'let' 'lt' 'mod' 'ne' 'or' 'order' 'return' 'satisfies' 'stable' 'to' 'treat' 'union' 'where'
*/

Whitespace ::= ( S | Comment )*


//<?TOKENS?>
          /* ws: explicit */

// Intellij gets upset if a token crosses a line boundary.  The lexer will
// generate a sequence of partial strings broken at newlines, these are bundled
// under a StringLiteral parent.
StringLiteral ::= StringPart+
StringPart ::= string

PredefinedEntityRef ::= '&' AsciiAlpha ';'
          /* ws: explicit */
CharRef  ::= '&#' Digits ';' | '&#x' (Digits | Hex)+ ';'

NCName ::= id

QName    ::= ( Prefix ':' LocalPart ) | LocalPart
Prefix   ::= NCName
LocalPart ::= NCName
/*
PITarget ::= NCName
DirPIContents ::= ( !'?' | '?'+ ( !'?' | !'>' ) )* '?'* & '?'
*/
Wildcard ::= NCName ':' '*' | '*' ( ':' NCName )?

Comment ::= COMMENT_START COMMENT_CONTENTS COMMENT_END

CDataSection ::= CDATA_START CDATA_CONTENTS CDATA_END

/*
FIXME: Pragma parsing intentionally simplified for now, need to recognize and highlight qname appropriately
Pragma ::= PRAGMA_START S? QName ( S PRAGMA_CONTENTS )? PRAGMA_END
*/
Pragma ::= PRAGMA_START S QName S PRAGMA_CONTENTS PRAGMA_END

DirCommentConstructor ::= XML_COMMENT_START XML_COMMENT_CONTENTS XML_COMMENT_END

/*
FIXME: PI Parsing intentionally simplified for now
DirPIConstructor ::= PI_START PITarget ( S DirPIContents )? PI_END
*/
DirPIConstructor ::= PI_START NCName ( S PI_CONTENTS )? PI_END
          /* ws: explicit */
