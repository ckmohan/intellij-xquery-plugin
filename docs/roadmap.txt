
	XQuery Plugin Roadmap

Basic functionality
	Syntax color highlighting with XQuery-specific color settings
	Visiual matching of (), [], {}, quotes, XQuery and XML comments, etc
	Auto comment/uncomment of XQuery code
	Jump to definition of variable or function
	Find usages of a variable or function
	Highlight (warn) unused variables and functions
	Highlight (error) references to undefined variables and functions
	Auto suggest
		variables and functions in scope at insertion point
		Types are displayed if defined
		Function paramters (with types) are displayed
	Refactor: rename variabled and functions

	All the above are working now, within the limits of the current
	state of the Parser/Lexer.  Some of these features currently
	stop working when the parser can't grok the whole XQuery program.

Parser enhancements - ongoing
	The parser is generated by a tool provided by IntelliJ for creating
	custom language plugins.  Some advanced work is needed to make it
	better able to cope with incomplete/malformed XQuery so that the
	contextual features can still operate.  When the parser can't
	complete its matching rules and build an AST, anything that depends
        on it for context doesn't work.  The XQuery grammar is fiendishly
        difficult to parse.  This work continues as the other features
	are being built up.  As the parsing rules improve, the dependent
	features will improve as well.


Intermediate functionality
	Contextual auto-complete
		Complete syntactic elements such as FLWORs, functions, etc
		Suggestion lists of variables and function valid at caret,
		including fn:, xdmp:, cts:, etc for declared XQuery version
	Annotate (highlight)
		Type mismatches when types are known or inferred
		Duplicate global variables or function names
		Warn about variables that hide other variables
		Unused imports and namespaces
		Flag incorrect option values

	Most of these are partially implemented or will soon be started as
	current code is further fleshed out.


Advanced Functionality
	Resolve namespaces by actual value, not just prefix, across imports
	Contextual documentation
		XQDoc-style info for user-defined function
		Type for variables, type and param signature for functions
		Popup doc items for ML-functions
	Code intentions
		Suggest actions to perform to auto-generate code for the
		current context, such as create functions, variables, etc
		Change visibility (private) of functions and variables
		Add casts or change types of variables
	Full refactoring
		Extract function, introduce variables/constants, inline
		functions and variables, simplify expressions, safe delete, etc
		Refactor across source files for rename, create, etc.
	Warn if imported module paths cannot be resolved.


Enhanced Runtime Functionality
	Execution
        	Setup an XCC connection and remember details in project
        	Submit code for execution on MarkLogic
        	Capture results in an edit buffer
        	Position cursor to offending line in case of an error
        	Suggest corrections for deducible errors

        Profiling
        	Submit code for execution under the profiler
        	Capture profile report and results in separate buffers
        	Retain history, draw graphs of performance changes over time

        Debugging
        	Setup a Debugger connection
        	Set breakpoints in XQuery source
        	Submit code for execution
        	Catch / single-step code on ML
        	Integrate with native IntelliJ debugger, if possible

	Testing Frameworks
		Define runtime harness strategy to automate use of
		popular unit testing frameworks.

======
Ron Hitchens
March 26, 2012